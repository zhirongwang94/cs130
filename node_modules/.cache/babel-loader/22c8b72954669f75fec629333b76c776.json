{"ast":null,"code":"var _jsxFileName = \"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx\";\n// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\nimport React, { useState } from 'react';\nimport { IonButton, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider } from '@ionic/react';\nimport { SMS } from '@ionic-native/sms';\nimport { Contacts, ContactFindOptions, ContactName, ContactField } from '@ionic-native/contacts';\nimport './Tab3.css';\n//import './ContactTracing'\nexport class ContactTracing {\n  constructor(contacts) {\n    this.contacts = contacts;\n  }\n\n  sendMessage() {\n    this.loadContacts();\n    this.sendSms();\n  }\n\n  loadContacts() {\n    this.testContact();\n    var myContacts;\n    let options = new ContactFindOptions();\n    options.filter = \"\";\n    options.multiple = true;\n    var fields = ['displayName', 'phoneNumbers'];\n    myContacts = Contacts.prototype.find(fields, options); //Need to create a display to show contacts\n\n    alert(\"Contacts Loaded! \\n\" + m);\n  }\n\n  testContact() {\n    let contact = this.contacts.create();\n    contact.name = new ContactName('', 'Smith', 'John');\n    contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n    contact.save(); // .then(\n    // () => console.log('Contact saved!', contact),\n    // (error: any) => console.error('Error saving contact.', error));\n\n    alert('Contact Saved!\\n');\n  }\n\n  sendSms() {\n    var message = \"\";\n    message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n\n    for (var index in emergencyList) {\n      if (emergencyList[index].isChecked) {\n        message += emergencyList[index].val + \"\\n\";\n      }\n    }\n\n    message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n\n    for (var index in symptomList) {\n      if (symptomList[index].isChecked) {\n        message += symptomList[index].val + \"\\n\";\n      }\n    }\n\n    alert(\"Symptoms List \\n\" + message);\n    SMS.send('5167120628', \"test sms\");\n    alert(\"sendSms was called!\");\n  }\n\n  checkSymptom(i, list) {\n    if (i < list.length) {\n      list[i].isChecked = !list[i].isChecked;\n    }\n  }\n\n}\nconst symptomList = [{\n  val: \"Cough\",\n  isChecked: false\n}, {\n  val: \"Fever or chills\",\n  isChecked: false\n}, {\n  val: \"Shortness of breath or difficulty breathing\",\n  isChecked: false\n}, {\n  val: \"Fatigue\",\n  isChecked: false\n}, {\n  val: \"Muscle or body aches\",\n  isChecked: false\n}, {\n  val: \"Headaches\",\n  isChecked: false\n}, {\n  val: \"New loss of taste or smell\",\n  isChecked: false\n}, {\n  val: \"Sore throat\",\n  isChecked: false\n}, {\n  val: \"Congestion or runny nose\",\n  isChecked: false\n}, {\n  val: \"Nausea or vomiting\",\n  isChecked: false\n}, {\n  val: \"Diarrhea\",\n  isChecked: false\n}];\nconst emergencyList = [{\n  val: \"Trouble breathing\",\n  isChecked: false\n}, {\n  val: \"Persistent pain or pressure in chest\",\n  isChecked: false\n}, {\n  val: \"New confusion\",\n  isChecked: false\n}, {\n  val: \"Inability to wake or stay awake\",\n  isChecked: false\n}, {\n  val: \"Bluish lips or face\",\n  isChecked: false\n}];\n\nconst Tab3 = () => {\n  const [checked, setChecked] = useState(false);\n  const [showAlert1, setShowAlert1] = useState(false);\n  const ct = new ContactTracing(new Contacts());\n  return /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Check Symptoms Experienced\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION\"), emergencyList.map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    onClick: () => ct.checkSymptom(i, emergencyList),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"Symptoms exprienced 2-14 days after exposure\"), symptomList.map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    onClick: () => ct.checkSymptom(i, symptomList),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonButton, {\n    onClick: () => ct.sendMessage(),\n    expand: \"block\",\n    shape: \"round\",\n    color: \"dark\",\n    fill: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Send Messages\")));\n};\n\nexport default Tab3;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx"],"names":["React","useState","IonButton","IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonCheckbox","IonList","IonItem","IonLabel","IonItemDivider","SMS","Contacts","ContactFindOptions","ContactName","ContactField","ContactTracing","constructor","contacts","sendMessage","loadContacts","sendSms","testContact","myContacts","options","filter","multiple","fields","prototype","find","alert","m","contact","create","name","phoneNumbers","save","message","index","emergencyList","isChecked","val","symptomList","send","checkSymptom","i","list","length","Tab3","checked","setChecked","showAlert1","setShowAlert1","ct","map"],"mappings":"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","sourcesContent":["// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\n\nimport React, { useState } from 'react';\nimport { IonAlert, IonButton, IonIcon, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider  } from '@ionic/react';\nimport { SMS } from '@ionic-native/sms';\nimport { Contacts, Contact, ContactFindOptions, ContactFieldType, ContactName, ContactField} from '@ionic-native/contacts';\nimport ExploreContainer from '../components/ExploreContainer';\nimport './Tab3.css';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport { isConstructorDeclaration } from 'typescript';\n//import './ContactTracing'\n\n\nexport class ContactTracing {\n  constructor( private contacts:Contacts) {}\n\n  sendMessage(){\n    this.loadContacts();\n    this.sendSms();\n\n  }\n\n  loadContacts(){\n\n    this.testContact()\n\n    var myContacts:Promise<Contact[]>;\n    let options = new ContactFindOptions();\n    options.filter= \"\";\n    options.multiple= true;\n    var fields:ContactFieldType[] = ['displayName', 'phoneNumbers'];\n    \n    myContacts = Contacts.prototype.find(fields, options);\n  \n    //Need to create a display to show contacts\n\n    alert(\"Contacts Loaded! \\n\" + m);\n  }\n\n  testContact(){\n    let contact: Contact = this.contacts.create();\n\n    contact.name = new ContactName('', 'Smith', 'John');\n    contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n    contact.save()\n    // .then(\n    // () => console.log('Contact saved!', contact),\n    // (error: any) => console.error('Error saving contact.', error));\n    alert('Contact Saved!\\n')\n  }\n\n  sendSms(){\n   \n    var message:String = \"\";\n\n    message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n    for(var index in emergencyList){\n      if(emergencyList[index].isChecked){\n        message += emergencyList[index].val + \"\\n\";\n      }\n    }\n\n    message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n    for(var index in symptomList){\n      if(symptomList[index].isChecked){\n        message += symptomList[index].val + \"\\n\";\n      }\n    }\n\n    alert(\"Symptoms List \\n\" + message);\n    SMS.send('5167120628', \"test sms\");\n    alert(\"sendSms was called!\");\n  }\n\n  checkSymptom(i:number, list:any){\n    if(i < list.length){\n      list[i].isChecked = !(list[i].isChecked);\n    }\n  }\n\n}\n\n\n\nconst symptomList = [\n  {val: \"Cough\", isChecked: false},\n  {val: \"Fever or chills\", isChecked: false},\n  {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n  {val: \"Fatigue\", isChecked: false},\n  {val: \"Muscle or body aches\", isChecked: false},\n  {val: \"Headaches\", isChecked: false},\n  {val: \"New loss of taste or smell\", isChecked: false},\n  {val: \"Sore throat\", isChecked: false},\n  {val: \"Congestion or runny nose\", isChecked: false},\n  {val: \"Nausea or vomiting\", isChecked: false},\n  {val: \"Diarrhea\", isChecked: false}\n]\n\nconst emergencyList = [\n  {val: \"Trouble breathing\", isChecked: false},\n  {val: \"Persistent pain or pressure in chest\", isChecked: false},\n  {val: \"New confusion\", isChecked: false},\n  {val: \"Inability to wake or stay awake\", isChecked: false},\n  {val: \"Bluish lips or face\", isChecked: false}\n]\n\n\nconst Tab3: React.FC = () => {\n  const [checked, setChecked] = useState(false);\n  const [showAlert1, setShowAlert1] = useState(false);\n  const ct:ContactTracing = new ContactTracing(new Contacts());\n  \n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Check Symptoms Experienced</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n      <IonList>\n          <IonItemDivider>EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION</IonItemDivider>\n          {emergencyList.map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} onClick={()=>ct.checkSymptom(i,emergencyList)} />\n            </IonItem>\n          ))}\n      </IonList>\n\n      <IonList>\n          <IonItemDivider>Symptoms exprienced 2-14 days after exposure</IonItemDivider>\n          {symptomList.map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} onClick={()=>ct.checkSymptom(i,symptomList)} />\n              \n            </IonItem>\n          ))}\n      </IonList>\n\n      <IonButton onClick={()=>ct.sendMessage()} expand=\"block\" shape=\"round\"  color=\"dark\" fill=\"solid\">\n        Send Messages\n      </IonButton>\n      {/* <IonAlert\n        isOpen={showAlert1}\n        onDidDismiss={() => setShowAlert1(false)}\n        cssClass='my-custom-class'\n        header={'Test Alert'}\n        subHeader={'Subtitle'}\n        message={'function has executed.'}\n        buttons={['OK']}\n      /> */}\n      \n      </IonContent>\n\n    </IonPage>\n  );\n};\n\n\nexport default Tab3;\n"]},"metadata":{},"sourceType":"module"}