{"ast":null,"code":"var _jsxFileName = \"/Users/zhirongwang/Desktop/cs130/src/pages/Tab1.js\";\nimport React, { Component, useState } from 'react';\nimport GoogleMapReact from 'google-map-react'; //import { Geolocation, Geoposition } from '@ionic-native/geolocation';\n\nimport { AnyCnameRecord } from 'dns';\nimport { IonHeader, IonToolbar, IonTitle, IonContent, IonList, IonItem, IonLabel, IonInput, IonButton, IonPage } from \"@ionic/react\";\n\nclass Tab1 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.apiHasLoaded = (map, mapsApi) => {\n      this.setState({\n        mapsLoaded: true,\n        map: map,\n        mapsApi: mapsApi,\n        placesService: new mapsApi.places.PlacesService(map),\n        geoCoderService: new mapsApi.Geocoder(),\n        directionService: new mapsApi.DirectionsService()\n      });\n    };\n\n    this.handleSearch = () => {\n      if (this.state.map === {}) {\n        return;\n      }\n\n      console.log(this.state.mapsApi);\n      console.log(this.state.map);\n      console.log(this.state.placesService);\n      console.log(this.state.latitude, this.state.longitude);\n      let {\n        markers,\n        placesService,\n        directionService,\n        mapsApi\n      } = this.state;\n      const filteredResults = []; //if (markers.length === 0){\n      //  console.log(\"add marker and try again\");\n      //  return;\n      //}\n\n      const markerLatLng = new mapsApi.LatLng(this.state.latitude, this.state.longitude);\n      const placesRequest = {\n        location: markerLatLng,\n        //radius: '3000000', // Cannot be used with rankBy. Pick your poison!\n        type: ['hospital', 'pharmacy', 'doctor'],\n        // List of types: https://developers.google.com/places/supported_types\n        query: 'covid 19 testing site',\n        rankBy: mapsApi.places.RankBy.DISTANCE\n      };\n      console.log(placesRequest);\n      placesService.textSearch(placesRequest, response => {\n        console.log(response.length);\n        let responseLimit = Math.min(5, response.length);\n\n        for (let i = 0; i < responseLimit; i++) {\n          const covidTesting = response[i];\n          const {\n            rating,\n            name\n          } = covidTesting;\n          const address = covidTesting.formatted_address;\n          let openNow = false;\n\n          if (covidTesting.opening_hours) {\n            openNow = covidTesting.opening_hours.isOpen(); // e.g true/false\n          } //console.log(name,address, openNow);\n\n\n          filteredResults.push({\n            name,\n            rating,\n            address,\n            openNow\n          });\n          this.setState({\n            searchResults: filteredResults\n          });\n        }\n\n        console.log(this.state.searchResults);\n      });\n    };\n\n    this.state = {\n      mapsLoaded: false,\n      latitude: 38,\n      longitude: -118,\n      map: {},\n      mapsApi: {},\n      markers: [],\n      searchResults: [],\n      placesService: {},\n      geoCoderService: {},\n      directionService: {}\n    };\n  }\n\n  async componentDidMount() {\n    await navigator.geolocation.getCurrentPosition(position => this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }));\n  } //    handleClick = () => {\n  //        this.componentDidMount();\n  //        console.log(\"set longitude:\",this.state.longitude);\n  //      }\n  //<IonButton color=\"primary\" onClick={this.getLocation}>{this.state.longitude ? `${this.state.latitude} ${this.state.longitude}` : \"Get Location\"}</IonButton>\n\n\n  render() {\n    //const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\n    const {\n      markers,\n      geoCoderService,\n      searchResults\n    } = this.state; // Google Maps Services\n\n    return /*#__PURE__*/React.createElement(IonPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, \"/*\", /*#__PURE__*/React.createElement(IonHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IonToolbar, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }, \"Login\"))), \"*/\", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(IonContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, \"Current Location: \", JSON.stringify(this.state.latitude), \" ,  \", JSON.stringify(this.state.longitude)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, \"Initial Location: \", JSON.stringify(this.state.latitude), \" ,  \", JSON.stringify(this.state.longitude)), /*#__PURE__*/React.createElement(IonButton, {\n      color: \"primary\",\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, \"search\"), searchResults.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 16\n      }\n    }, JSON.stringify(searchResults))) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google-map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\n        libraries: ['places', 'directions']\n      },\n      defaultZoom: 11,\n      defaultCenter: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      } //yesIWantToUseGoogleMapApiInternals={true}\n      ,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => this.apiHasLoaded(map, maps) // \"maps\" is the mapApi. Bad naming but that's their library.\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\n;\nexport default Tab1;","map":{"version":3,"sources":["/Users/zhirongwang/Desktop/cs130/src/pages/Tab1.js"],"names":["React","Component","useState","GoogleMapReact","AnyCnameRecord","IonHeader","IonToolbar","IonTitle","IonContent","IonList","IonItem","IonLabel","IonInput","IonButton","IonPage","Tab1","constructor","props","apiHasLoaded","map","mapsApi","setState","mapsLoaded","placesService","places","PlacesService","geoCoderService","Geocoder","directionService","DirectionsService","handleSearch","state","console","log","latitude","longitude","markers","filteredResults","markerLatLng","LatLng","placesRequest","location","type","query","rankBy","RankBy","DISTANCE","textSearch","response","length","responseLimit","Math","min","i","covidTesting","rating","name","address","formatted_address","openNow","opening_hours","isOpen","push","searchResults","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","render","JSON","stringify","key","libraries","lat","lng","maps"],"mappings":"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","sourcesContent":["import React,  { Component,useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\n//import { Geolocation, Geoposition } from '@ionic-native/geolocation';\nimport { AnyCnameRecord } from 'dns';\nimport {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonList,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonButton,\n    IonPage\n  } from \"@ionic/react\";\n\n\nclass Tab1 extends Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mapsLoaded: false,     \n            latitude:38,\n            longitude:-118,\n            map: {},\n            mapsApi: {},\n            markers: [],\n            searchResults: [],\n            placesService: {},\n            geoCoderService: {},\n            directionService: {},\n        };\n    }\n    apiHasLoaded = ((map, mapsApi) => {\n        this.setState({\n          mapsLoaded: true,\n          map: map,\n          mapsApi: mapsApi,\n          placesService: new mapsApi.places.PlacesService(map),\n          geoCoderService: new mapsApi.Geocoder(),\n          directionService: new mapsApi.DirectionsService(),\n        });\n    });\n    \n\n    handleSearch = (() => {\n      if (this.state.map === {}){\n        return\n      }\n      console.log(this.state.mapsApi);\n      console.log(this.state.map);\n      console.log(this.state.placesService);\n      console.log(this.state.latitude, this.state.longitude);\n        let {markers, placesService, directionService,mapsApi } = this.state;\n        const filteredResults = [];\n        //if (markers.length === 0){\n        //  console.log(\"add marker and try again\");\n        //  return;\n        //}\n        const markerLatLng = new mapsApi.LatLng(this.state.latitude, this.state.longitude);\n        const placesRequest = {\n              location: markerLatLng,\n              //radius: '3000000', // Cannot be used with rankBy. Pick your poison!\n              type: ['hospital', 'pharmacy','doctor'], // List of types: https://developers.google.com/places/supported_types\n              query: 'covid 19 testing site',\n              rankBy: mapsApi.places.RankBy.DISTANCE,\n          }\n          console.log(placesRequest);\n          placesService.textSearch(placesRequest, ((response) => {\n              console.log(response.length)\n              let responseLimit = Math.min(5, response.length);\n              for (let i = 0; i < responseLimit; i++) {\n                  const covidTesting = response[i];\n                  const { rating, name } = covidTesting;\n                  const address = covidTesting.formatted_address; \n                  let openNow = false;\n                  if (covidTesting.opening_hours) {\n                      openNow = covidTesting.opening_hours.isOpen(); // e.g true/false\n                  }\n                  //console.log(name,address, openNow);\n                  filteredResults.push({\n                    name,\n                    rating,\n                    address,\n                    openNow,\n                  });\n                  this.setState({ searchResults: filteredResults });\n              }\n              console.log(this.state.searchResults);\n              \n          }\n          ))\n    });\n    \n    async componentDidMount() {\n      await navigator.geolocation.getCurrentPosition(\n          position => this.setState({ \n              latitude: position.coords.latitude, \n              longitude: position.coords.longitude\n          })\n      )\n  }\n\n//    handleClick = () => {\n//        this.componentDidMount();\n//        console.log(\"set longitude:\",this.state.longitude);\n//      }\n      \n\n      //<IonButton color=\"primary\" onClick={this.getLocation}>{this.state.longitude ? `${this.state.latitude} ${this.state.longitude}` : \"Get Location\"}</IonButton>\n      render(){\n      //const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\n      const { markers, geoCoderService,searchResults } = this.state; // Google Maps Services\n      return(\n              <IonPage>\n\n                      /* \n              <IonHeader>\n                <IonToolbar color=\"primary\">\n                  <IonTitle>Login</IonTitle>\n                </IonToolbar>\n              </IonHeader>\n                        */\n              <div>            \n\n          {/* Search Button */}\n          </div>\n              <IonContent>\n              <div>Current Location: {JSON.stringify(this.state.latitude  )} ,  {JSON.stringify(this.state.longitude )}</div> \n              <div>Initial Location: {JSON.stringify(this.state.latitude )} ,  {JSON.stringify(this.state.longitude)}</div> \n              <IonButton color=\"primary\" onClick={this.handleSearch}>\n              {\"search\"} \n            </IonButton> \n            {searchResults.length > 0 ? \n               <>\n               <div>\n               {JSON.stringify(searchResults)}\n               </div>\n               </>\n               : null}\n\n\n\n              <div className=\"google-map\">\n\n            <GoogleMapReact\n              bootstrapURLKeys={{\n                key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\n                libraries: ['places', 'directions']\n              }}\n              defaultZoom={11}\n              defaultCenter={{ lat: this.state.latitude, lng: this.state.longitude }}\n              //yesIWantToUseGoogleMapApiInternals={true}\n              yesIWantToUseGoogleMapApiInternals\n              onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\n            >\n\n  \n               </GoogleMapReact>\n               </div>\n               \n                </IonContent>\n                </IonPage>\n            );\n      }\n    \n  };\n  \n  \n  \n  \n  export default Tab1;"]},"metadata":{},"sourceType":"module"}