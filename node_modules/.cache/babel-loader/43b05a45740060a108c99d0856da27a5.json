{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, checkAvailability, cordovaInstance, instanceAvailability, instancePropertyGet, instancePropertySet, getPromise } from '@ionic-native/core';\n\nvar Contact =\n/** @class */\nfunction () {\n  function Contact() {\n    if (checkAvailability('navigator.contacts', 'create', 'Contacts') === true) {\n      this._objectInstance = navigator.contacts.create();\n    }\n  }\n\n  Contact.prototype.clone = function () {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        var newContact = new Contact();\n\n        for (var prop in _this) {\n          if (prop === 'id') return;\n          newContact[prop] = _this[prop];\n        }\n\n        return newContact;\n      }\n    }();\n  };\n\n  Contact.prototype.remove = function () {\n    return cordovaInstance(this, \"remove\", {}, arguments);\n  };\n\n  Contact.prototype.save = function () {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return getPromise(function (resolve, reject) {\n          _this._objectInstance.save(function (contact) {\n            _this._objectInstance = contact;\n            resolve(_this);\n          }, reject);\n        });\n      }\n    }();\n  };\n\n  Object.defineProperty(Contact.prototype, \"id\", {\n    get: function () {\n      return instancePropertyGet(this, \"id\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"id\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"displayName\", {\n    get: function () {\n      return instancePropertyGet(this, \"displayName\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"displayName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"name\", {\n    get: function () {\n      return instancePropertyGet(this, \"name\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"name\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"nickname\", {\n    get: function () {\n      return instancePropertyGet(this, \"nickname\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"nickname\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"phoneNumbers\", {\n    get: function () {\n      return instancePropertyGet(this, \"phoneNumbers\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"phoneNumbers\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"emails\", {\n    get: function () {\n      return instancePropertyGet(this, \"emails\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"emails\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"addresses\", {\n    get: function () {\n      return instancePropertyGet(this, \"addresses\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"addresses\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"ims\", {\n    get: function () {\n      return instancePropertyGet(this, \"ims\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"ims\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"organizations\", {\n    get: function () {\n      return instancePropertyGet(this, \"organizations\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"organizations\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"birthday\", {\n    get: function () {\n      return instancePropertyGet(this, \"birthday\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"birthday\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"note\", {\n    get: function () {\n      return instancePropertyGet(this, \"note\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"note\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"photos\", {\n    get: function () {\n      return instancePropertyGet(this, \"photos\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"photos\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"categories\", {\n    get: function () {\n      return instancePropertyGet(this, \"categories\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"categories\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Contact.prototype, \"urls\", {\n    get: function () {\n      return instancePropertyGet(this, \"urls\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"urls\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Contact;\n}();\n\nexport { Contact };\n\nvar ContactName =\n/** @class */\nfunction () {\n  function ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix) {\n    this.formatted = formatted;\n    this.familyName = familyName;\n    this.givenName = givenName;\n    this.middleName = middleName;\n    this.honorificPrefix = honorificPrefix;\n    this.honorificSuffix = honorificSuffix;\n  }\n\n  return ContactName;\n}();\n\nexport { ContactName };\n\nvar ContactField =\n/** @class */\nfunction () {\n  function ContactField(type, value, pref) {\n    this.type = type;\n    this.value = value;\n    this.pref = pref;\n  }\n\n  return ContactField;\n}();\n\nexport { ContactField };\n\nvar ContactAddress =\n/** @class */\nfunction () {\n  function ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country) {\n    this.pref = pref;\n    this.type = type;\n    this.formatted = formatted;\n    this.streetAddress = streetAddress;\n    this.locality = locality;\n    this.region = region;\n    this.postalCode = postalCode;\n    this.country = country;\n  }\n\n  return ContactAddress;\n}();\n\nexport { ContactAddress };\n\nvar ContactOrganization =\n/** @class */\nfunction () {\n  function ContactOrganization(type, name, department, title, pref) {\n    this.type = type;\n    this.name = name;\n    this.department = department;\n    this.title = title;\n    this.pref = pref;\n  }\n\n  return ContactOrganization;\n}();\n\nexport { ContactOrganization };\n\nvar ContactFindOptions =\n/** @class */\nfunction () {\n  function ContactFindOptions(filter, multiple, desiredFields, hasPhoneNumber) {\n    this.filter = filter;\n    this.multiple = multiple;\n    this.desiredFields = desiredFields;\n    this.hasPhoneNumber = hasPhoneNumber;\n  }\n\n  return ContactFindOptions;\n}();\n\nexport { ContactFindOptions };\n\nvar Contacts =\n/** @class */\nfunction (_super) {\n  __extends(Contacts, _super);\n\n  function Contacts() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Create a single contact.\n   * @returns {Contact} Returns a Contact object\n   */\n\n\n  Contacts.prototype.create = function () {\n    return new Contact();\n  };\n\n  Contacts.prototype.find = function (fields, options) {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve, reject) {\n          navigator.contacts.find(fields, function (contacts) {\n            resolve(contacts.map(processContact));\n          }, reject, options);\n        });\n      }\n    }();\n  };\n\n  Contacts.prototype.pickContact = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve, reject) {\n          navigator.contacts.pickContact(function (contact) {\n            return resolve(processContact(contact));\n          }, reject);\n        });\n      }\n    }();\n  };\n\n  Contacts.pluginName = \"Contacts\";\n  Contacts.plugin = \"cordova-plugin-contacts\";\n  Contacts.pluginRef = \"navigator.contacts\";\n  Contacts.repo = \"https://github.com/apache/cordova-plugin-contacts\";\n  Contacts.platforms = [\"Android\", \"BlackBerry 10\", \"Browser\", \"Firefox OS\", \"iOS\", \"Ubuntu\", \"Windows\", \"Windows 8\", \"Windows Phone\"];\n  return Contacts;\n}(IonicNativePlugin);\n\nexport { Contacts };\n/**\n * @hidden\n */\n\nfunction processContact(contact) {\n  var newContact = new Contact();\n\n  for (var prop in contact) {\n    if (typeof contact[prop] === 'function') continue;\n    newContact[prop] = contact[prop];\n  }\n\n  return newContact;\n}","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/contacts/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CordovaCheck,\n  CordovaInstance,\n  InstanceCheck,\n  InstanceProperty,\n  IonicNativePlugin,\n  Plugin,\n  checkAvailability,\n  getPromise,\n} from '@ionic-native/core';\n\ndeclare const window: any, navigator: any;\n\nexport type ContactFieldType =\n  | '*'\n  | 'addresses'\n  | 'birthday'\n  | 'categories'\n  | 'country'\n  | 'department'\n  | 'displayName'\n  | 'emails'\n  | 'name.familyName'\n  | 'name.formatted'\n  | 'name.givenName'\n  | 'name.honorificPrefix'\n  | 'name.honorificSuffix'\n  | 'id'\n  | 'ims'\n  | 'locality'\n  | 'name.middleName'\n  | 'name'\n  | 'nickname'\n  | 'note'\n  | 'organizations'\n  | 'phoneNumbers'\n  | 'photos'\n  | 'postalCode'\n  | 'region'\n  | 'streetAddress'\n  | 'title'\n  | 'urls';\n\nexport interface IContactProperties {\n  /** A globally unique identifier. */\n  id?: string;\n\n  /** A globally unique identifier on Android. */\n  rawId?: string;\n\n  /** The name of this Contact, suitable for display to end users. */\n  displayName?: string;\n\n  /** An object containing all components of a persons name. */\n  name?: IContactName;\n\n  /** A casual name by which to address the contact. */\n  nickname?: string;\n\n  /** An array of all the contact's phone numbers. */\n  phoneNumbers?: IContactField[];\n\n  /** An array of all the contact's email addresses. */\n  emails?: IContactField[];\n\n  /** An array of all the contact's addresses. */\n  addresses?: IContactAddress[];\n\n  /** An array of all the contact's IM addresses. */\n  ims?: IContactField[];\n\n  /** An array of all the contact's organizations. */\n  organizations?: IContactOrganization[];\n\n  /** The birthday of the contact. */\n  birthday?: Date;\n\n  /** A note about the contact. */\n  note?: string;\n\n  /** An array of the contact's photos. */\n  photos?: IContactField[];\n\n  /** An array of all the user-defined categories associated with the contact. */\n  categories?: IContactField[];\n\n  /** An array of web pages associated with the contact. */\n  urls?: IContactField[];\n}\n\n/**\n * @hidden\n */\nexport class Contact implements IContactProperties {\n  @InstanceProperty() id: string;\n  @InstanceProperty() displayName: string;\n  @InstanceProperty() name: IContactName;\n  @InstanceProperty() nickname: string;\n  @InstanceProperty() phoneNumbers: IContactField[];\n  @InstanceProperty() emails: IContactField[];\n  @InstanceProperty() addresses: IContactAddress[];\n  @InstanceProperty() ims: IContactField[];\n  @InstanceProperty() organizations: IContactOrganization[];\n  @InstanceProperty() birthday: Date;\n  @InstanceProperty() note: string;\n  @InstanceProperty() photos: IContactField[];\n  @InstanceProperty() categories: IContactField[];\n  @InstanceProperty() urls: IContactField[];\n  private _objectInstance: any;\n\n  [key: string]: any;\n\n  constructor() {\n    if (checkAvailability('navigator.contacts', 'create', 'Contacts') === true) {\n      this._objectInstance = navigator.contacts.create();\n    }\n  }\n\n  @InstanceCheck()\n  clone(): Contact {\n    const newContact: any = new Contact();\n    for (const prop in this) {\n      if (prop === 'id') return;\n      newContact[prop] = this[prop];\n    }\n    return newContact;\n  }\n\n  @CordovaInstance()\n  remove(): Promise<any> {\n    return;\n  }\n\n  @InstanceCheck()\n  save(): Promise<any> {\n    return getPromise((resolve: Function, reject: Function) => {\n      this._objectInstance.save((contact: any) => {\n        this._objectInstance = contact;\n        resolve(this);\n      }, reject);\n    });\n  }\n}\n\n/**\n * @hidden\n */\nexport interface IContactError {\n  /** Error code */\n  code: number;\n  /** Error message */\n  message: string;\n}\n\n/**\n * @hidden\n */\nexport declare const ContactError: {\n  new (code: number): IContactError;\n  UNKNOWN_ERROR: number;\n  INVALID_ARGUMENT_ERROR: number;\n  TIMEOUT_ERROR: number;\n  PENDING_OPERATION_ERROR: number;\n  IO_ERROR: number;\n  NOT_SUPPORTED_ERROR: number;\n  PERMISSION_DENIED_ERROR: number;\n};\n\nexport interface IContactName {\n  /** The complete name of the contact. */\n  formatted?: string;\n  /** The contact's family name. */\n  familyName?: string;\n  /** The contact's given name. */\n  givenName?: string;\n  /** The contact's middle name. */\n  middleName?: string;\n  /** The contact's prefix (example Mr. or Dr.) */\n  honorificPrefix?: string;\n  /** The contact's suffix (example Esq.). */\n  honorificSuffix?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactName implements IContactName {\n  constructor(\n    public formatted?: string,\n    public familyName?: string,\n    public givenName?: string,\n    public middleName?: string,\n    public honorificPrefix?: string,\n    public honorificSuffix?: string\n  ) {}\n}\n\nexport interface IContactField {\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The value of the field, such as a phone number or email address. */\n  value?: string;\n  /** Set to true if this ContactField contains the user's preferred value. */\n  pref?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactField implements IContactField {\n  constructor(public type?: string, public value?: string, public pref?: boolean) {}\n}\n\nexport interface IContactAddress {\n  /** Set to true if this ContactAddress contains the user's preferred value. */\n  pref?: boolean;\n  /** A string indicating what type of field this is, home for example. */\n  type?: string;\n  /** The full address formatted for display. */\n  formatted?: string;\n  /** The full street address. */\n  streetAddress?: string;\n  /** The city or locality. */\n  locality?: string;\n  /** The state or region. */\n  region?: string;\n  /** The zip code or postal code. */\n  postalCode?: string;\n  /** The country name. */\n  country?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactAddress implements IContactAddress {\n  constructor(\n    public pref?: boolean,\n    public type?: string,\n    public formatted?: string,\n    public streetAddress?: string,\n    public locality?: string,\n    public region?: string,\n    public postalCode?: string,\n    public country?: string\n  ) {}\n}\n\nexport interface IContactOrganization {\n  /** Set to true if this ContactOrganization contains the user's preferred value. */\n  pref?: boolean;\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The name of the organization. */\n  name?: string;\n  /** The department the contract works for. */\n  department?: string;\n  /** The contact's title at the organization. */\n  title?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactOrganization implements IContactOrganization {\n  constructor(\n    public type?: string,\n    public name?: string,\n    public department?: string,\n    public title?: string,\n    public pref?: boolean\n  ) {}\n}\n\n/** Search options to filter navigator.contacts.  */\nexport interface IContactFindOptions {\n  /** The search string used to find navigator.contacts. */\n  filter?: string;\n  /** Determines if the find operation returns multiple navigator.contacts. Defaults to false. */\n  multiple?: boolean;\n  /** Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. */\n  desiredFields?: string[];\n  /**\n   * (Android only): Filters the search to only return contacts with a phone number informed.\n   */\n  hasPhoneNumber?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactFindOptions implements IContactFindOptions {\n  constructor(\n    public filter?: string,\n    public multiple?: boolean,\n    public desiredFields?: string[],\n    public hasPhoneNumber?: boolean\n  ) {}\n}\n\n/**\n * @name Contacts\n * @premier contacts\n * @description\n * Access and manage Contacts on the device.\n *\n * @deprecated\n * @usage\n *\n * ```typescript\n * import { Contacts, Contact, ContactField, ContactName } from '@ionic-native/contacts/ngx';\n *\n * constructor(private contacts: Contacts) { }\n *\n * let contact: Contact = this.contacts.create();\n *\n * contact.name = new ContactName(null, 'Smith', 'John');\n * contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n * contact.save().then(\n *   () => console.log('Contact saved!', contact),\n *   (error: any) => console.error('Error saving contact.', error)\n * );\n *\n * ```\n * @classes\n * Contact\n * @interfaces\n * IContactProperties\n * IContactError\n * IContactName\n * IContactField\n * IContactAddress\n * IContactOrganization\n * IContactFindOptions\n */\n@Plugin({\n  pluginName: 'Contacts',\n  plugin: 'cordova-plugin-contacts',\n  pluginRef: 'navigator.contacts',\n  repo: 'https://github.com/apache/cordova-plugin-contacts',\n  platforms: [\n    'Android',\n    'BlackBerry 10',\n    'Browser',\n    'Firefox OS',\n    'iOS',\n    'Ubuntu',\n    'Windows',\n    'Windows 8',\n    'Windows Phone',\n  ],\n})\nexport class Contacts extends IonicNativePlugin {\n  /**\n   * Create a single contact.\n   * @returns {Contact} Returns a Contact object\n   */\n  create(): Contact {\n    return new Contact();\n  }\n\n  /**\n   * Search for contacts in the Contacts list.\n   * @param {ContactFieldType[]} fields Contact fields to be used as a search qualifier\n   * @param {IContactFindOptions} [options] Optional options for the query\n   * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)\n   */\n  @CordovaCheck()\n  find(fields: ContactFieldType[], options?: IContactFindOptions): Promise<Contact[]> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.find(\n        fields,\n        (contacts: any[]) => {\n          resolve(contacts.map(processContact));\n        },\n        reject,\n        options\n      );\n    });\n  }\n\n  /**\n   * Select a single Contact.\n   * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact\n   */\n  @CordovaCheck()\n  pickContact(): Promise<Contact> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.pickContact((contact: any) => resolve(processContact(contact)), reject);\n    });\n  }\n}\n\n/**\n * @hidden\n */\nfunction processContact(contact: any) {\n  const newContact = new Contact();\n  for (const prop in contact) {\n    if (typeof contact[prop] === 'function') continue;\n    newContact[prop] = contact[prop];\n  }\n  return newContact;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}