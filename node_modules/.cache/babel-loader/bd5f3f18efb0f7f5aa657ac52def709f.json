{"ast":null,"code":"var _jsxFileName = \"/Users/zhirongwang/Desktop/cs130master/src/pages/Tab1.tsx\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { IonHeader, IonToolbar, IonTitle, IonContent, IonButton, IonPage } from \"@ionic/react\";\n\nclass Tab1 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.apiHasLoaded = (map, mapsApi) => {\n      this.setState({\n        mapsLoaded: true,\n        map: map,\n        mapsApi: mapsApi,\n        placesService: new mapsApi.places.PlacesService(map),\n        geoCoderService: new mapsApi.Geocoder(),\n        directionService: new mapsApi.DirectionsService()\n      });\n      console.log(this.state.mapsApi);\n      console.log(this.state.map); //var {placesService, directionService } = this.state;\n\n      let markerLatLng = new mapsApi.LatLng(this.state.latitude, this.state.latitude);\n      let placesRequest = {\n        location: markerLatLng,\n        //radius: '3000000', // Cannot be used with rankBy. Pick your poison!\n        type: ['hospital', 'pharmacy', 'doctor'],\n        // List of types: https://developers.google.com/places/supported_types\n        query: 'covid 19 testing site',\n        rankBy: mapsApi.places.RankBy.DISTANCE\n      };\n      console.log(placesRequest);\n      new mapsApi.places.PlacesService(map).textSearch(placesRequest, response => {\n        console.log(response.length);\n        let responseLimit = Math.min(5, response.length);\n\n        for (let i = 0; i < responseLimit; i++) {\n          const covidTesting = response[i];\n          const {\n            rating,\n            name\n          } = covidTesting;\n          const address = covidTesting.formatted_address;\n          let openNow = false;\n\n          if (covidTesting.opening_hours) {\n            openNow = covidTesting.opening_hours.open_now; // e.g true/false\n          }\n\n          console.log(name, address, openNow);\n        }\n      });\n    };\n\n    this.handleClick = () => {\n      this.componentDidMount();\n      console.log(\"set longitude:\", this.state.longitude);\n    };\n\n    this.state = {\n      mapsLoaded: false,\n      latitude: 37.4,\n      longitude: -122,\n      map: {},\n      mapsApi: {},\n      searchResults: [],\n      placesService: {},\n      geoCoderService: {},\n      directionService: {}\n    };\n  }\n\n  async componentDidMount() {\n    await navigator.geolocation.getCurrentPosition(position => this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }));\n  } //<IonButton color=\"primary\" onClick={this.getLocation}>{this.state.longitude ? `${this.state.latitude} ${this.state.longitude}` : \"Get Location\"}</IonButton>\n\n\n  render() {\n    //const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\n    const {\n      geoCoderService\n    } = this.state; // Google Maps Services\n\n    return /*#__PURE__*/React.createElement(IonPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IonHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IonToolbar, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }\n    }, \"Login\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IonButton, {\n      color: \"primary\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Update my locations\")), /*#__PURE__*/React.createElement(IonContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, \"Current Location: \", JSON.stringify(this.state.latitude), \" ,  \", JSON.stringify(this.state.latitude)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"Initial Location: \", JSON.stringify(this.state.latitude), \" ,  \", JSON.stringify(this.state.longitude)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google-map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\n        libraries: ['places', 'directions']\n      },\n      defaultZoom: 11,\n      defaultCenter: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      } //yesIWantToUseGoogleMapApiInternals={true}\n      ,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => this.apiHasLoaded(map, maps) // \"maps\" is the mapApi. Bad naming but that's their library.\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\n;\nexport default Tab1;","map":{"version":3,"sources":["/Users/zhirongwang/Desktop/cs130master/src/pages/Tab1.tsx"],"names":["React","Component","GoogleMapReact","IonHeader","IonToolbar","IonTitle","IonContent","IonButton","IonPage","Tab1","constructor","props","apiHasLoaded","map","mapsApi","setState","mapsLoaded","placesService","places","PlacesService","geoCoderService","Geocoder","directionService","DirectionsService","console","log","state","markerLatLng","LatLng","latitude","placesRequest","location","type","query","rankBy","RankBy","DISTANCE","textSearch","response","length","responseLimit","Math","min","i","covidTesting","rating","name","address","formatted_address","openNow","opening_hours","open_now","handleClick","componentDidMount","longitude","searchResults","navigator","geolocation","getCurrentPosition","position","coords","render","JSON","stringify","key","libraries","lat","lng","maps"],"mappings":"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","sourcesContent":["import React,  { Component,useState } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { Geolocation, Geoposition } from '@ionic-native/geolocation';\r\nimport { AnyCnameRecord } from 'dns';\r\nimport {\r\n    IonHeader,\r\n    IonToolbar,\r\n    IonTitle,\r\n    IonContent,\r\n    IonList,\r\n    IonItem,\r\n    IonLabel,\r\n    IonInput,\r\n    IonButton,\r\n    IonPage\r\n  } from \"@ionic/react\";\r\ninterface MyProps {\r\n\r\n}\r\n\r\ninterface MyState {\r\n    mapsLoaded: boolean,     \r\n    //position :any,\r\n    latitude:number,\r\n    longitude:number,\r\n    map: {},\r\n    mapsApi: {},\r\n    searchResults: [],\r\n    placesService: {},\r\n    geoCoderService: {},\r\n    directionService: {},\r\n}\r\n\r\nclass Tab1 extends Component <MyProps,MyState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            mapsLoaded: false,     \r\n            latitude:37.4,\r\n            longitude:-122,\r\n            map: {},\r\n            mapsApi: {},\r\n            searchResults: [],\r\n            placesService: {},\r\n            geoCoderService: {},\r\n            directionService: {},\r\n        };\r\n    }\r\n    apiHasLoaded = (map:any, mapsApi:any) => {\r\n      this.setState({\r\n        mapsLoaded: true,\r\n        map: map,\r\n        mapsApi: mapsApi,\r\n        placesService: new mapsApi.places.PlacesService(map),\r\n        geoCoderService: new mapsApi.Geocoder(),\r\n        directionService: new mapsApi.DirectionsService(),\r\n      });\r\n      console.log(this.state.mapsApi);\r\n      console.log(this.state.map);\r\n      \r\n        //var {placesService, directionService } = this.state;\r\n        let markerLatLng = new mapsApi.LatLng(this.state.latitude, this.state.latitude);\r\n        let placesRequest = {\r\n              location: markerLatLng,\r\n              //radius: '3000000', // Cannot be used with rankBy. Pick your poison!\r\n              type: ['hospital', 'pharmacy','doctor'], // List of types: https://developers.google.com/places/supported_types\r\n              query: 'covid 19 testing site',\r\n              rankBy: mapsApi.places.RankBy.DISTANCE,\r\n          }\r\n          console.log(placesRequest);\r\n          new mapsApi.places.PlacesService(map).textSearch(placesRequest, ((response:any) => {\r\n              console.log(response.length)\r\n              let responseLimit = Math.min(5, response.length);\r\n              for (let i = 0; i < responseLimit; i++) {\r\n                  const covidTesting = response[i];\r\n                  const { rating, name } = covidTesting;\r\n                  const address = covidTesting.formatted_address; \r\n                  let openNow = false;\r\n                  if (covidTesting.opening_hours) {\r\n                      openNow = covidTesting.opening_hours.open_now; // e.g true/false\r\n                  }\r\n                  console.log(name,address, openNow);\r\n              }\r\n              \r\n          }\r\n          ))\r\n\r\n     \r\n    };\r\n    \r\n    handleClick = () => {\r\n      this.componentDidMount();\r\n      console.log(\"set longitude:\",this.state.longitude);\r\n    }\r\n    async componentDidMount() {\r\n          await navigator.geolocation.getCurrentPosition(\r\n              position => this.setState({ \r\n                  latitude: position.coords.latitude, \r\n                  longitude: position.coords.longitude\r\n              })\r\n          \r\n          )\r\n      }\r\n      \r\n\r\n      //<IonButton color=\"primary\" onClick={this.getLocation}>{this.state.longitude ? `${this.state.latitude} ${this.state.longitude}` : \"Get Location\"}</IonButton>\r\n      render(){\r\n        //const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\r\n        const {  geoCoderService } = this.state; // Google Maps Services\r\n      return(\r\n              <IonPage>\r\n              <IonHeader>\r\n                <IonToolbar color=\"primary\">\r\n                  <IonTitle>Login</IonTitle>\r\n                </IonToolbar>\r\n              </IonHeader>\r\n              <div>            \r\n            <IonButton color=\"primary\" onClick={this.handleClick}>\r\n              {\"Update my locations\"} \r\n            </IonButton> \r\n          </div>\r\n              <IonContent>\r\n              <div>Current Location: {JSON.stringify(this.state.latitude  )} ,  {JSON.stringify(this.state.latitude )}</div> \r\n              <div>Initial Location: {JSON.stringify(this.state.latitude )} ,  {JSON.stringify(this.state.longitude)}</div> \r\n              <div className=\"google-map\">\r\n            <GoogleMapReact\r\n              bootstrapURLKeys={{\r\n                key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\r\n                libraries: ['places', 'directions']\r\n              }}\r\n              defaultZoom={11}\r\n              defaultCenter={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n              //yesIWantToUseGoogleMapApiInternals={true}\r\n              yesIWantToUseGoogleMapApiInternals\r\n              onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\r\n            >\r\n  \r\n               </GoogleMapReact>\r\n               </div>\r\n                </IonContent>\r\n                </IonPage>\r\n            );\r\n      }\r\n    \r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  export default Tab1;"]},"metadata":{},"sourceType":"module"}