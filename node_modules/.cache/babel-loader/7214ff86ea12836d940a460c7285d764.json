{"ast":null,"code":"var _jsxFileName = \"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx\";\n// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\nimport React, { useState } from 'react';\nimport { IonButton, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider } from '@ionic/react';\nimport { SMS } from '@ionic-native/sms';\nimport { Contacts, ContactFindOptions } from '@ionic-native/contacts';\nimport './Tab3.css';\n//import './ContactTracing'\nexport class ContactTracing {\n  constructor(contacts) {\n    this.contacts = contacts;\n  }\n\n  sendMessage() {\n    this.loadContacts();\n    this.sendSms();\n  } // onSuccess(contacts:Contact[]){\n  // }\n\n\n  loadContacts() {\n    var myContacts;\n    let options = new ContactFindOptions();\n    options.filter = \"\";\n    options.multiple = true; //options.hasPhoneNumber= true; //Android only\n    //options.desiredFields = \n\n    var fields = ['displayName', 'phoneNumbers'];\n    myContacts = Contacts.prototype.find(fields, options); //Need to create a display to show contacts\n\n    alert(\"Contacts Loaded!\");\n  }\n\n  sendSms() {\n    var message = \"\";\n    alert(symptomList[0].val);\n    message += \"IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n\n    for (var index in emergencyList) {\n      if (emergencyList[index].isChecked) {\n        message += emergencyList[index].val + \"\\n\";\n      }\n    }\n\n    message += \"Non-Emergency Symptoms:\\n\";\n\n    for (var index in symptomList) {\n      if (symptomList[index].isChecked) {\n        message += symptomList[index].val + \"\\n\";\n      }\n    }\n\n    alert(\"Symptoms List \\n\" + message);\n    SMS.send('5167120628', \"test sms\");\n    alert(\"sendSms was called!\");\n  }\n\n}\nconst symptomList = [{\n  val: \"Cough\",\n  isChecked: false\n}, {\n  val: \"Fever or chills\",\n  isChecked: false\n}, {\n  val: \"Shortness of breath or difficulty breathing\",\n  isChecked: false\n}, {\n  val: \"Fatigue\",\n  isChecked: false\n}, {\n  val: \"Muscle or body aches\",\n  isChecked: false\n}, {\n  val: \"Headaches\",\n  isChecked: false\n}, {\n  val: \"New loss of taste or smell\",\n  isChecked: false\n}, {\n  val: \"Sore throat\",\n  isChecked: false\n}, {\n  val: \"Congestion or runny nose\",\n  isChecked: false\n}, {\n  val: \"Nausea or vomiting\",\n  isChecked: false\n}, {\n  val: \"Diarrhea\",\n  isChecked: false\n}];\nconst emergencyList = [{\n  val: \"Trouble breathing\",\n  isChecked: false\n}, {\n  val: \"Persistent pain or pressure in chest\",\n  isChecked: false\n}, {\n  val: \"New confusion\",\n  isChecked: false\n}, {\n  val: \"Inability to wake or stay awake\",\n  isChecked: false\n}, {\n  val: \"Bluish lips or face\",\n  isChecked: false\n}];\n\nconst Tab3 = () => {\n  const [checked, setChecked] = useState(false);\n  const [showAlert1, setShowAlert1] = useState(false);\n  const ct = new ContactTracing(new Contacts());\n  return /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Check Symptoms Experienced\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION\"), emergencyList.map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Symptoms exprienced 2-14 days after exposure\"), symptomList.map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonButton, {\n    onClick: () => ct.sendMessage(),\n    expand: \"block\",\n    shape: \"round\",\n    color: \"dark\",\n    fill: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Send Messages\")));\n};\n\nexport default Tab3;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx"],"names":["React","useState","IonButton","IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonCheckbox","IonList","IonItem","IonLabel","IonItemDivider","SMS","Contacts","ContactFindOptions","ContactTracing","constructor","contacts","sendMessage","loadContacts","sendSms","myContacts","options","filter","multiple","fields","prototype","find","alert","message","symptomList","val","index","emergencyList","isChecked","send","Tab3","checked","setChecked","showAlert1","setShowAlert1","ct","map","i"],"mappings":"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","sourcesContent":["// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\n\nimport React, { useState } from 'react';\nimport { IonAlert, IonButton, IonIcon, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider  } from '@ionic/react';\nimport { SMS } from '@ionic-native/sms';\nimport { Contacts, Contact, ContactFindOptions, ContactFieldType } from '@ionic-native/contacts';\nimport ExploreContainer from '../components/ExploreContainer';\nimport './Tab3.css';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport { isConstructorDeclaration } from 'typescript';\n//import './ContactTracing'\n\n\nexport class ContactTracing {\n  constructor( private contacts:Contacts) {}\n\n  sendMessage(){\n    this.loadContacts();\n    this.sendSms();\n\n  }\n\n  // onSuccess(contacts:Contact[]){\n\n  // }\n\n  loadContacts(){\n    var myContacts:Promise<Contact[]>;\n    let options = new ContactFindOptions();\n    options.filter= \"\";\n    options.multiple= true;\n    //options.hasPhoneNumber= true; //Android only\n    //options.desiredFields = \n    var fields:ContactFieldType[] = ['displayName', 'phoneNumbers'];\n\n    myContacts = Contacts.prototype.find(fields, options);\n    \n    //Need to create a display to show contacts\n\n    alert(\"Contacts Loaded!\");\n  }\n\n  sendSms(){\n   \n    var message:String = \"\";\n\n    alert(symptomList[0].val)\n    message += \"IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n    for(var index in emergencyList){\n      if(emergencyList[index].isChecked){\n        message += emergencyList[index].val + \"\\n\";\n      }\n    }\n\n    message += \"Non-Emergency Symptoms:\\n\";\n    for(var index in symptomList){\n      if(symptomList[index].isChecked){\n        message += symptomList[index].val + \"\\n\";\n      }\n    }\n\n    alert(\"Symptoms List \\n\" + message);\n    SMS.send('5167120628', \"test sms\");\n    alert(\"sendSms was called!\");\n  }\n\n}\n\n\nconst symptomList = [\n  {val: \"Cough\", isChecked: false},\n  {val: \"Fever or chills\", isChecked: false},\n  {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n  {val: \"Fatigue\", isChecked: false},\n  {val: \"Muscle or body aches\", isChecked: false},\n  {val: \"Headaches\", isChecked: false},\n  {val: \"New loss of taste or smell\", isChecked: false},\n  {val: \"Sore throat\", isChecked: false},\n  {val: \"Congestion or runny nose\", isChecked: false},\n  {val: \"Nausea or vomiting\", isChecked: false},\n  {val: \"Diarrhea\", isChecked: false}\n]\n\nconst emergencyList = [\n  {val: \"Trouble breathing\", isChecked: false},\n  {val: \"Persistent pain or pressure in chest\", isChecked: false},\n  {val: \"New confusion\", isChecked: false},\n  {val: \"Inability to wake or stay awake\", isChecked: false},\n  {val: \"Bluish lips or face\", isChecked: false}\n]\n\n\nconst Tab3: React.FC = () => {\n  const [checked, setChecked] = useState(false);\n  const [showAlert1, setShowAlert1] = useState(false);\n  const ct:ContactTracing = new ContactTracing(new Contacts());\n  \n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Check Symptoms Experienced</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n      <IonList>\n          <IonItemDivider>EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION</IonItemDivider>\n          {emergencyList.map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} />\n            </IonItem>\n          ))}\n      </IonList>\n      <IonList>\n          <IonItemDivider>Symptoms exprienced 2-14 days after exposure</IonItemDivider>\n          {symptomList.map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} />\n            </IonItem>\n          ))}\n      </IonList>\n\n      <IonButton onClick={()=>ct.sendMessage()} expand=\"block\" shape=\"round\"  color=\"dark\" fill=\"solid\">\n        Send Messages\n      </IonButton>\n      {/* <IonAlert\n        isOpen={showAlert1}\n        onDidDismiss={() => setShowAlert1(false)}\n        cssClass='my-custom-class'\n        header={'Test Alert'}\n        subHeader={'Subtitle'}\n        message={'function has executed.'}\n        buttons={['OK']}\n      /> */}\n      \n      </IonContent>\n\n    </IonPage>\n  );\n};\n\n\nexport default Tab3;\n"]},"metadata":{},"sourceType":"module"}