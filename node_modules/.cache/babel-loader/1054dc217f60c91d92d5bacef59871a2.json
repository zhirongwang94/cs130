{"ast":null,"code":"var _jsxFileName = \"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx\";\n// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\nimport React from 'react';\nimport { IonButton, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider } from '@ionic/react'; //import { SMS } from '@ionic-native/sms';\n//import {Contact} from \"@capacitor-community/contacts\";\n\nimport Singleton from \"./ContactTracing\";\nimport './Tab3.css';\nimport { Route } from 'react-router-dom'; //\n\nimport displayContacts from './displayContacts';\n//Do I need to add another cordova plugin to complete sms functionality\n// function checkSymptom(i:number, list:any){\n//   if(i < list.length){\n//     list[i].isChecked = !(list[i].isChecked);\n//   }\n// }\n// const symptomList = [\n//   {val: \"Cough\", isChecked: false},\n//   {val: \"Fever or chills\", isChecked: false},\n//   {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n//   {val: \"Fatigue\", isChecked: false},\n//   {val: \"Muscle or body aches\", isChecked: false},\n//   {val: \"Headaches\", isChecked: false},\n//   {val: \"New loss of taste or smell\", isChecked: false},\n//   {val: \"Sore throat\", isChecked: false},\n//   {val: \"Congestion or runny nose\", isChecked: false},\n//   {val: \"Nausea or vomiting\", isChecked: false},\n//   {val: \"Diarrhea\", isChecked: false}\n// ]\n// const emergencyList = [\n//   {val: \"Trouble breathing\", isChecked: false},\n//   {val: \"Persistent pain or pressure in chest\", isChecked: false},\n//   {val: \"New confusion\", isChecked: false},\n//   {val: \"Inability to wake or stay awake\", isChecked: false},\n//   {val: \"Bluish lips or face\", isChecked: false}\n// ]\n//Create ct object that will have loaded contacts to display. \n//Button click - Redirect to displayContacts page\n//displayContacts will modfy ContactTracing\n//on Buttonclick redirect to symptom display page\nconst ct = Singleton.getInstance();\n\nconst Tab3 = () => {\n  // const [checked, setChecked] = useState(false);\n  // const [showAlert1, setShowAlert1] = useState(false);\n  //var c:ContactTracing = ContactTracing.getInstance();\n  //const history = useHistory()\n  // const onPush = () => { //\n  //   history.push('/displayContacts')\n  // };\n  return /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Check Symptoms Experienced\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION\"), ct.getEmergencyList().map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    onClick: () => ct.checkEmergency(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonItemDivider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Symptoms exprienced 2-14 days after exposure\"), ct.getSymptomsList().map(({\n    val,\n    isChecked\n  }, i) => /*#__PURE__*/React.createElement(IonItem, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, val), /*#__PURE__*/React.createElement(IonCheckbox, {\n    slot: \"end\",\n    value: val,\n    checked: isChecked,\n    onClick: () => ct.checkSymptom(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(IonButton, {\n    href: \"displayContacts\",\n    expand: \"block\",\n    shape: \"round\",\n    color: \"dark\",\n    fill: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/displayContacts\",\n    component: displayContacts,\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), \"Send Message\")));\n};\n\nexport default Tab3;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/Tab3.tsx"],"names":["React","IonButton","IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonCheckbox","IonList","IonItem","IonLabel","IonItemDivider","Singleton","Route","displayContacts","ct","getInstance","Tab3","getEmergencyList","map","val","isChecked","i","checkEmergency","getSymptomsList","checkSymptom"],"mappings":"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","sourcesContent":["// IONSLIDES FOR TABS?\n// ionChange\tEmitted when the checked property has changed.\n\nimport React from 'react';\nimport { IonAlert, IonButton, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider, IonRouterOutlet  } from '@ionic/react';\n//import { SMS } from '@ionic-native/sms';\n//import {Contact} from \"@capacitor-community/contacts\";\nimport  Singleton  from \"./ContactTracing\";\nimport ExploreContainer from '../components/ExploreContainer';\nimport './Tab3.css';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport { isConstructorDeclaration } from 'typescript';\nimport {useHistory, Route} from 'react-router-dom' //\nimport displayContacts from './displayContacts';\nimport { IonReactRouter } from '@ionic/react-router';\n\n\n//Do I need to add another cordova plugin to complete sms functionality\n\n// function checkSymptom(i:number, list:any){\n//   if(i < list.length){\n//     list[i].isChecked = !(list[i].isChecked);\n//   }\n// }\n\n// const symptomList = [\n//   {val: \"Cough\", isChecked: false},\n//   {val: \"Fever or chills\", isChecked: false},\n//   {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n//   {val: \"Fatigue\", isChecked: false},\n//   {val: \"Muscle or body aches\", isChecked: false},\n//   {val: \"Headaches\", isChecked: false},\n//   {val: \"New loss of taste or smell\", isChecked: false},\n//   {val: \"Sore throat\", isChecked: false},\n//   {val: \"Congestion or runny nose\", isChecked: false},\n//   {val: \"Nausea or vomiting\", isChecked: false},\n//   {val: \"Diarrhea\", isChecked: false}\n// ]\n\n// const emergencyList = [\n//   {val: \"Trouble breathing\", isChecked: false},\n//   {val: \"Persistent pain or pressure in chest\", isChecked: false},\n//   {val: \"New confusion\", isChecked: false},\n//   {val: \"Inability to wake or stay awake\", isChecked: false},\n//   {val: \"Bluish lips or face\", isChecked: false}\n// ]\n\n//Create ct object that will have loaded contacts to display. \n//Button click - Redirect to displayContacts page\n//displayContacts will modfy ContactTracing\n//on Buttonclick redirect to symptom display page\nconst ct = Singleton.getInstance();\n\n\nconst Tab3: React.FC = () => {\n  // const [checked, setChecked] = useState(false);\n  // const [showAlert1, setShowAlert1] = useState(false);\n  //var c:ContactTracing = ContactTracing.getInstance();\n  //const history = useHistory()\n  // const onPush = () => { //\n  //   history.push('/displayContacts')\n  // };\n  \n  \n\n  return (\n    <IonPage>\n      {/* <IonReactRouter>\n      <IonRouterOutlet>\n          <Route path=\"/displayContacts\" component={displayContacts} exact={true}/>\n      </IonRouterOutlet>\n      </IonReactRouter> */}\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Check Symptoms Experienced</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n      <IonList>\n          <IonItemDivider>EMERGENCY WARNING SIGNS - IF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION</IonItemDivider>\n          {ct.getEmergencyList().map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} onClick={()=>ct.checkEmergency(i)} />\n            </IonItem>\n          ))} \n      </IonList>\n\n      <IonList>\n          <IonItemDivider>Symptoms exprienced 2-14 days after exposure</IonItemDivider>\n          {ct.getSymptomsList().map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} onClick={()=>ct.checkSymptom(i)} />\n              \n            </IonItem>\n          ))}\n      </IonList>\n\n      <IonButton href='displayContacts' expand=\"block\" shape=\"round\"  color=\"dark\" fill=\"solid\">\n        <Route path={\"/displayContacts\"} component={displayContacts} exact={true}/> \n        Send Message\n      </IonButton>\n      \n      \n      </IonContent>\n\n    </IonPage>\n  );\n};\n\n\nexport default Tab3;\n"]},"metadata":{},"sourceType":"module"}