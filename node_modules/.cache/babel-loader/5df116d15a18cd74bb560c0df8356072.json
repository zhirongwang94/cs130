{"ast":null,"code":"var _jsxFileName = \"/Users/zhirongwang/Desktop/cs130/src/pages/Tab1.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapAutoComplete from '../components/MapAutoComplete';\nimport MapMarker from '../components/MapMarker';\nimport PlaceCard from '../components/PlaceCard';\nimport ConstraintSlider from '../components/ConstraintSlider';\nimport { Button, Input, Divider, message } from 'antd';\nconst SG_COOR = {\n  lat: 1.3521,\n  lng: 103.8198\n};\n\nclass MapsContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateConstraintName = (event, key) => {\n      event.preventDefault();\n      const prevConstraints = this.state.constraints;\n      const constraints = Object.assign([], prevConstraints);\n      constraints[key].name = event.target.value;\n      this.setState({\n        constraints\n      });\n    };\n\n    this.updateConstraintTime = (key, value) => {\n      const prevConstraints = this.state.constraints;\n      const constraints = Object.assign([], prevConstraints);\n      constraints[key].time = value;\n      this.setState({\n        constraints\n      });\n    };\n\n    this.addMarker = (lat, lng, name) => {\n      const prevMarkers = this.state.markers;\n      const markers = Object.assign([], prevMarkers); // If name already exists in marker list just replace lat & lng.\n\n      let newMarker = true;\n\n      for (let i = 0; i < markers.length; i++) {\n        if (markers[i].name === name) {\n          newMarker = false;\n          markers[i].lat = lat;\n          markers[i].lng = lng;\n          message.success(`Updated \"${name}\" Marker`);\n          break;\n        }\n      } // Name does not exist in marker list. Create new marker\n\n\n      if (newMarker) {\n        markers.push({\n          lat,\n          lng,\n          name\n        });\n        message.success(`Added new \"${name}\" Marker`);\n      }\n\n      this.setState({\n        markers\n      });\n    };\n\n    this.apiHasLoaded = (map, mapsApi) => {\n      this.setState({\n        mapsLoaded: true,\n        map,\n        mapsApi,\n        singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n        autoCompleteService: new mapsApi.places.AutocompleteService(),\n        placesService: new mapsApi.places.PlacesService(map),\n        geoCoderService: new mapsApi.Geocoder(),\n        directionService: new mapsApi.DirectionsService()\n      });\n    };\n\n    this.handleSearch = () => {\n      const {\n        markers,\n        constraints,\n        placesService,\n        directionService,\n        mapsApi\n      } = this.state;\n\n      if (markers.length === 0) {\n        message.warn('Add a constraint and try again!');\n        return;\n      }\n\n      const filteredResults = [];\n      const marker = markers[0];\n      const timeLimit = constraints[0].time;\n      const markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\n      const placesRequest = {\n        location: markerLatLng,\n        // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n        type: ['restaurant', 'cafe'],\n        // List of types: https://developers.google.com/places/supported_types\n        query: 'ice cream',\n        rankBy: mapsApi.places.RankBy.DISTANCE // Cannot be used with radius.\n\n      }; // First, search for ice cream shops.\n\n      placesService.textSearch(placesRequest, response => {\n        // Only look at the nearest top 5.\n        const responseLimit = Math.min(5, response.length);\n\n        for (let i = 0; i < responseLimit; i++) {\n          const iceCreamPlace = response[i];\n          const {\n            rating,\n            name\n          } = iceCreamPlace;\n          const address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n\n          const priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n\n          let photoUrl = '';\n          let openNow = false;\n\n          if (iceCreamPlace.opening_hours) {\n            openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n          }\n\n          if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n            photoUrl = iceCreamPlace.photos[0].getUrl();\n          } // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n\n\n          const directionRequest = {\n            origin: markerLatLng,\n            destination: address,\n            // Address of ice cream place\n            travelMode: 'DRIVING'\n          };\n          directionService.route(directionRequest, (result, status) => {\n            if (status !== 'OK') {\n              return;\n            }\n\n            const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n\n            const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n\n            if (travellingTimeInMinutes < timeLimit) {\n              const distanceText = travellingRoute.distance.text; // 6.4km\n\n              const timeText = travellingRoute.duration.text; // 11 mins\n\n              filteredResults.push({\n                name,\n                rating,\n                address,\n                openNow,\n                priceLevel,\n                photoUrl,\n                distanceText,\n                timeText\n              });\n            } // Finally, Add results to state\n\n\n            this.setState({\n              searchResults: filteredResults\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      constraints: [{\n        name: '',\n        time: 0\n      }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {}\n    };\n  } // Update name for constraint with index === key\n\n\n  render() {\n    const {\n      constraints,\n      mapsLoaded,\n      singaporeLatLng,\n      markers,\n      searchResults\n    } = this.state;\n    const {\n      autoCompleteService,\n      geoCoderService\n    } = this.state; // Google Maps Services\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-100 d-flex py-4 flex-wrap justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"w-100 fw-md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, \"Find Some Ice-Creams!\"), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, mapsLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, constraints.map((constraint, key) => {\n      const {\n        name,\n        time\n      } = constraint;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: key,\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        className: \"col-4 mr-2\",\n        placeholder: \"Name\",\n        onChange: event => this.updateConstraintName(event, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(MapAutoComplete, {\n        autoCompleteService: autoCompleteService,\n        geoCoderService: geoCoderService,\n        singaporeLatLng: singaporeLatLng,\n        markerName: name,\n        addMarker: this.addMarker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(ConstraintSlider, {\n        iconType: \"car\",\n        value: time,\n        onChange: value => this.updateConstraintTime(key, value),\n        text: \"Minutes away by car\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }\n      }));\n    })) : null), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"col-8 h-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\n        libraries: ['places', 'directions']\n      },\n      defaultZoom: 11,\n      defaultCenter: {\n        lat: SG_COOR.lat,\n        lng: SG_COOR.lng\n      },\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => this.apiHasLoaded(map, maps) // \"maps\" is the mapApi. Bad naming but that's their library.\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, markers.map((marker, key) => {\n      const {\n        name,\n        lat,\n        lng\n      } = marker;\n      return /*#__PURE__*/React.createElement(MapMarker, {\n        key: key,\n        name: name,\n        lat: lat,\n        lng: lng,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-4 fw-md\",\n      type: \"primary\",\n      size: \"large\",\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, \"Search!\"), searchResults.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"mb-4 fw-md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, \"Tadah! Ice-Creams!\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, searchResults.map((result, key) => /*#__PURE__*/React.createElement(PlaceCard, {\n      info: result,\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }))), \"s\"))) : null);\n  }\n\n}\n\nexport default MapsContainer;","map":{"version":3,"sources":["/Users/zhirongwang/Desktop/cs130/src/pages/Tab1.js"],"names":["React","Component","GoogleMapReact","MapAutoComplete","MapMarker","PlaceCard","ConstraintSlider","Button","Input","Divider","message","SG_COOR","lat","lng","MapsContainer","constructor","props","updateConstraintName","event","key","preventDefault","prevConstraints","state","constraints","Object","assign","name","target","value","setState","updateConstraintTime","time","addMarker","prevMarkers","markers","newMarker","i","length","success","push","apiHasLoaded","map","mapsApi","mapsLoaded","singaporeLatLng","LatLng","autoCompleteService","places","AutocompleteService","placesService","PlacesService","geoCoderService","Geocoder","directionService","DirectionsService","handleSearch","warn","filteredResults","marker","timeLimit","markerLatLng","placesRequest","location","type","query","rankBy","RankBy","DISTANCE","textSearch","response","responseLimit","Math","min","iceCreamPlace","rating","address","formatted_address","priceLevel","price_level","photoUrl","openNow","opening_hours","open_now","photos","getUrl","directionRequest","origin","destination","travelMode","route","result","status","travellingRoute","routes","legs","travellingTimeInMinutes","duration","distanceText","distance","text","timeText","searchResults","render","constraint","libraries","maps"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,OAAjC,QAAgD,MAAhD;AAEA,MAAMC,OAAO,GAAG;AAAEC,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,GAAG,EAAE;AAApB,CAAhB;;AAEA,MAAMC,aAAN,SAA4Bb,SAA5B,CAAsC;AACpCc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkBnBC,oBAlBmB,GAkBK,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACtCD,MAAAA,KAAK,CAACE,cAAN;AACA,YAAMC,eAAe,GAAG,KAAKC,KAAL,CAAWC,WAAnC;AACA,YAAMA,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,eAAlB,CAApB;AACAE,MAAAA,WAAW,CAACJ,GAAD,CAAX,CAAiBO,IAAjB,GAAwBR,KAAK,CAACS,MAAN,CAAaC,KAArC;AACA,WAAKC,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACD,KAxBkB;;AAAA,SA2BnBO,oBA3BmB,GA2BK,CAACX,GAAD,EAAMS,KAAN,KAAgB;AACtC,YAAMP,eAAe,GAAG,KAAKC,KAAL,CAAWC,WAAnC;AACA,YAAMA,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,eAAlB,CAApB;AACAE,MAAAA,WAAW,CAACJ,GAAD,CAAX,CAAiBY,IAAjB,GAAwBH,KAAxB;AACA,WAAKC,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACD,KAhCkB;;AAAA,SAmCnBS,SAnCmB,GAmCN,CAACpB,GAAD,EAAMC,GAAN,EAAWa,IAAX,KAAoB;AAC/B,YAAMO,WAAW,GAAG,KAAKX,KAAL,CAAWY,OAA/B;AACA,YAAMA,OAAO,GAAGV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,WAAlB,CAAhB,CAF+B,CAI/B;;AACA,UAAIE,SAAS,GAAG,IAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAIF,OAAO,CAACE,CAAD,CAAP,CAAWV,IAAX,KAAoBA,IAAxB,EAA8B;AAC5BS,UAAAA,SAAS,GAAG,KAAZ;AACAD,UAAAA,OAAO,CAACE,CAAD,CAAP,CAAWxB,GAAX,GAAiBA,GAAjB;AACAsB,UAAAA,OAAO,CAACE,CAAD,CAAP,CAAWvB,GAAX,GAAiBA,GAAjB;AACAH,UAAAA,OAAO,CAAC4B,OAAR,CAAiB,YAAWZ,IAAK,UAAjC;AACA;AACD;AACF,OAd8B,CAe/B;;;AACA,UAAIS,SAAJ,EAAe;AACbD,QAAAA,OAAO,CAACK,IAAR,CAAa;AAAE3B,UAAAA,GAAF;AAAOC,UAAAA,GAAP;AAAYa,UAAAA;AAAZ,SAAb;AACAhB,QAAAA,OAAO,CAAC4B,OAAR,CAAiB,cAAaZ,IAAK,UAAnC;AACD;;AAED,WAAKG,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACD,KAzDkB;;AAAA,SA6DnBM,YA7DmB,GA6DH,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAChC,WAAKb,QAAL,CAAc;AACZc,QAAAA,UAAU,EAAE,IADA;AAEZF,QAAAA,GAFY;AAGZC,QAAAA,OAHY;AAIZE,QAAAA,eAAe,EAAE,IAAIF,OAAO,CAACG,MAAZ,CAAmBlC,OAAO,CAACC,GAA3B,EAAgCD,OAAO,CAACE,GAAxC,CAJL;AAKZiC,QAAAA,mBAAmB,EAAE,IAAIJ,OAAO,CAACK,MAAR,CAAeC,mBAAnB,EALT;AAMZC,QAAAA,aAAa,EAAE,IAAIP,OAAO,CAACK,MAAR,CAAeG,aAAnB,CAAiCT,GAAjC,CANH;AAOZU,QAAAA,eAAe,EAAE,IAAIT,OAAO,CAACU,QAAZ,EAPL;AAQZC,QAAAA,gBAAgB,EAAE,IAAIX,OAAO,CAACY,iBAAZ;AARN,OAAd;AAUD,KAxEkB;;AAAA,SA2EnBC,YA3EmB,GA2EH,MAAM;AACpB,YAAM;AAAErB,QAAAA,OAAF;AAAWX,QAAAA,WAAX;AAAwB0B,QAAAA,aAAxB;AAAuCI,QAAAA,gBAAvC;AAAyDX,QAAAA;AAAzD,UAAqE,KAAKpB,KAAhF;;AACA,UAAIY,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB3B,QAAAA,OAAO,CAAC8C,IAAR,CAAa,iCAAb;AACA;AACD;;AACD,YAAMC,eAAe,GAAG,EAAxB;AACA,YAAMC,MAAM,GAAGxB,OAAO,CAAC,CAAD,CAAtB;AACA,YAAMyB,SAAS,GAAGpC,WAAW,CAAC,CAAD,CAAX,CAAeQ,IAAjC;AACA,YAAM6B,YAAY,GAAG,IAAIlB,OAAO,CAACG,MAAZ,CAAmBa,MAAM,CAAC9C,GAA1B,EAA+B8C,MAAM,CAAC7C,GAAtC,CAArB;AAEA,YAAMgD,aAAa,GAAG;AACpBC,QAAAA,QAAQ,EAAEF,YADU;AAEpB;AACAG,QAAAA,IAAI,EAAE,CAAC,YAAD,EAAe,MAAf,CAHc;AAGU;AAC9BC,QAAAA,KAAK,EAAE,WAJa;AAKpBC,QAAAA,MAAM,EAAEvB,OAAO,CAACK,MAAR,CAAemB,MAAf,CAAsBC,QALV,CAKoB;;AALpB,OAAtB,CAXoB,CAmBpB;;AACAlB,MAAAA,aAAa,CAACmB,UAAd,CAAyBP,aAAzB,EAA0CQ,QAAD,IAAc;AACrD;AACA,cAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,QAAQ,CAAChC,MAArB,CAAtB;;AACA,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,aAApB,EAAmClC,CAAC,EAApC,EAAwC;AACtC,gBAAMqC,aAAa,GAAGJ,QAAQ,CAACjC,CAAD,CAA9B;AACA,gBAAM;AAAEsC,YAAAA,MAAF;AAAUhD,YAAAA;AAAV,cAAmB+C,aAAzB;AACA,gBAAME,OAAO,GAAGF,aAAa,CAACG,iBAA9B,CAHsC,CAGW;;AACjD,gBAAMC,UAAU,GAAGJ,aAAa,CAACK,WAAjC,CAJsC,CAIQ;;AAC9C,cAAIC,QAAQ,GAAG,EAAf;AACA,cAAIC,OAAO,GAAG,KAAd;;AACA,cAAIP,aAAa,CAACQ,aAAlB,EAAiC;AAC/BD,YAAAA,OAAO,GAAGP,aAAa,CAACQ,aAAd,CAA4BC,QAAtC,CAD+B,CACiB;AACjD;;AACD,cAAIT,aAAa,CAACU,MAAd,IAAwBV,aAAa,CAACU,MAAd,CAAqB9C,MAArB,GAA8B,CAA1D,EAA6D;AAC3D0C,YAAAA,QAAQ,GAAGN,aAAa,CAACU,MAAd,CAAqB,CAArB,EAAwBC,MAAxB,EAAX;AACD,WAZqC,CActC;;;AACA,gBAAMC,gBAAgB,GAAG;AACvBC,YAAAA,MAAM,EAAE1B,YADe;AAEvB2B,YAAAA,WAAW,EAAEZ,OAFU;AAED;AACtBa,YAAAA,UAAU,EAAE;AAHW,WAAzB;AAKAnC,UAAAA,gBAAgB,CAACoC,KAAjB,CAAuBJ,gBAAvB,EAA0C,CAACK,MAAD,EAASC,MAAT,KAAoB;AAC5D,gBAAIA,MAAM,KAAK,IAAf,EAAqB;AAAE;AAAQ;;AAC/B,kBAAMC,eAAe,GAAGF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBC,IAAjB,CAAsB,CAAtB,CAAxB,CAF4D,CAEV;;AAClD,kBAAMC,uBAAuB,GAAGH,eAAe,CAACI,QAAhB,CAAyBpE,KAAzB,GAAiC,EAAjE;;AACA,gBAAImE,uBAAuB,GAAGpC,SAA9B,EAAyC;AACvC,oBAAMsC,YAAY,GAAGL,eAAe,CAACM,QAAhB,CAAyBC,IAA9C,CADuC,CACa;;AACpD,oBAAMC,QAAQ,GAAGR,eAAe,CAACI,QAAhB,CAAyBG,IAA1C,CAFuC,CAES;;AAChD1C,cAAAA,eAAe,CAAClB,IAAhB,CAAqB;AACnBb,gBAAAA,IADmB;AAEnBgD,gBAAAA,MAFmB;AAGnBC,gBAAAA,OAHmB;AAInBK,gBAAAA,OAJmB;AAKnBH,gBAAAA,UALmB;AAMnBE,gBAAAA,QANmB;AAOnBkB,gBAAAA,YAPmB;AAQnBG,gBAAAA;AARmB,eAArB;AAUD,aAjB2D,CAkB5D;;;AACA,iBAAKvE,QAAL,CAAc;AAAEwE,cAAAA,aAAa,EAAE5C;AAAjB,aAAd;AACD,WApBD;AAqBD;AACF,OA7CD;AA8CD,KA7IkB;;AAEjB,SAAKnC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,CAAC;AAAEG,QAAAA,IAAI,EAAE,EAAR;AAAYK,QAAAA,IAAI,EAAE;AAAlB,OAAD,CADF;AAEXsE,MAAAA,aAAa,EAAE,EAFJ;AAGX1D,MAAAA,UAAU,EAAE,KAHD;AAIXT,MAAAA,OAAO,EAAE,EAJE;AAKXO,MAAAA,GAAG,EAAE,EALM;AAMXC,MAAAA,OAAO,EAAE,EANE;AAOXE,MAAAA,eAAe,EAAE,EAPN;AAQXE,MAAAA,mBAAmB,EAAE,EARV;AASXG,MAAAA,aAAa,EAAE,EATJ;AAUXE,MAAAA,eAAe,EAAE,EAVN;AAWXE,MAAAA,gBAAgB,EAAE;AAXP,KAAb;AAaD,GAhBmC,CAkBpC;;;AAiIAiD,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE/E,MAAAA,WAAF;AAAeoB,MAAAA,UAAf;AAA2BC,MAAAA,eAA3B;AAA4CV,MAAAA,OAA5C;AAAqDmE,MAAAA;AAArD,QAAuE,KAAK/E,KAAlF;AACA,UAAM;AAAEwB,MAAAA,mBAAF;AAAuBK,MAAAA;AAAvB,QAA2C,KAAK7B,KAAtD,CAFO,CAEsD;;AAC7D,wBACE;AAAK,MAAA,SAAS,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAGE;AAAS,MAAA,SAAS,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGqB,UAAU,gBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGpB,WAAW,CAACkB,GAAZ,CAAgB,CAAC8D,UAAD,EAAapF,GAAb,KAAqB;AACpC,YAAM;AAAEO,QAAAA,IAAF;AAAQK,QAAAA;AAAR,UAAiBwE,UAAvB;AACA,0BACE;AAAK,QAAA,GAAG,EAAEpF,GAAV;AAAe,QAAA,SAAS,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,WAAW,EAAC,MAA1C;AAAiD,QAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKD,oBAAL,CAA0BC,KAA1B,EAAiCC,GAAjC,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,eAAD;AACE,QAAA,mBAAmB,EAAE2B,mBADvB;AAEE,QAAA,eAAe,EAAEK,eAFnB;AAGE,QAAA,eAAe,EAAEP,eAHnB;AAIE,QAAA,UAAU,EAAElB,IAJd;AAKE,QAAA,SAAS,EAAE,KAAKM,SALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,eAWE,oBAAC,gBAAD;AACE,QAAA,QAAQ,EAAC,KADX;AAEE,QAAA,KAAK,EAAED,IAFT;AAGE,QAAA,QAAQ,EAAGH,KAAD,IAAW,KAAKE,oBAAL,CAA0BX,GAA1B,EAA+BS,KAA/B,CAHvB;AAIE,QAAA,IAAI,EAAC,qBAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,eAiBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,CADF;AAqBD,KAvBA,CADH,CADS,GA2BP,IA5BN,CAHF,eAoCE;AAAS,MAAA,SAAS,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,gBAAgB,EAAE;AAChBT,QAAAA,GAAG,EAAE,yCADW;AAEhBqF,QAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,YAAX;AAFK,OADpB;AAKE,MAAA,WAAW,EAAE,EALf;AAME,MAAA,aAAa,EAAE;AAAE5F,QAAAA,GAAG,EAAED,OAAO,CAACC,GAAf;AAAoBC,QAAAA,GAAG,EAAEF,OAAO,CAACE;AAAjC,OANjB;AAOE,MAAA,kCAAkC,EAAE,IAPtC;AAQE,MAAA,iBAAiB,EAAE,CAAC;AAAE4B,QAAAA,GAAF;AAAOgE,QAAAA;AAAP,OAAD,KAAmB,KAAKjE,YAAL,CAAkBC,GAAlB,EAAuBgE,IAAvB,CARxC,CAQsE;AARtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWGvE,OAAO,CAACO,GAAR,CAAY,CAACiB,MAAD,EAASvC,GAAT,KAAiB;AAC5B,YAAM;AAAEO,QAAAA,IAAF;AAAQd,QAAAA,GAAR;AAAaC,QAAAA;AAAb,UAAqB6C,MAA3B;AACA,0BACE,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEvC,GAAhB;AAAqB,QAAA,IAAI,EAAEO,IAA3B;AAAiC,QAAA,GAAG,EAAEd,GAAtC;AAA2C,QAAA,GAAG,EAAEC,GAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KALA,CAXH,CADF,CApCF,eA0DE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,IAAI,EAAC,SAApC;AAA8C,MAAA,IAAI,EAAC,OAAnD;AAA2D,MAAA,OAAO,EAAE,KAAK0C,YAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA1DF,EA6DG8C,aAAa,CAAChE,MAAd,GAAuB,CAAvB,gBACC,uDACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAS,MAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGgE,aAAa,CAAC5D,GAAd,CAAkB,CAACiD,MAAD,EAASvE,GAAT,kBACjB,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEuE,MAAjB;AAAyB,MAAA,GAAG,EAAEvE,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAFF,MADF,CAFF,CADD,GAcG,IA3EN,CADF;AA+ED;;AArOmC;;AAwOtC,eAAeL,aAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapAutoComplete from '../components/MapAutoComplete';\nimport MapMarker from '../components/MapMarker';\nimport PlaceCard from '../components/PlaceCard';\nimport ConstraintSlider from '../components/ConstraintSlider';\n\nimport { Button, Input, Divider, message } from 'antd';\n\nconst SG_COOR = { lat: 1.3521, lng: 103.8198 };\n\nclass MapsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      constraints: [{ name: '', time: 0 }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {},\n    };\n  }\n\n  // Update name for constraint with index === key\n  updateConstraintName = ((event, key) => {\n    event.preventDefault();\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].name = event.target.value;\n    this.setState({ constraints });\n  });\n\n  // Updates distance (in KM) for constraint with index == key\n  updateConstraintTime = ((key, value) => {\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].time = value;\n    this.setState({ constraints });\n  });\n\n  // Adds a Marker to the GoogleMaps component\n  addMarker = ((lat, lng, name) => {\n    const prevMarkers = this.state.markers;\n    const markers = Object.assign([], prevMarkers);\n\n    // If name already exists in marker list just replace lat & lng.\n    let newMarker = true;\n    for (let i = 0; i < markers.length; i++) {\n      if (markers[i].name === name) {\n        newMarker = false;\n        markers[i].lat = lat;\n        markers[i].lng = lng;\n        message.success(`Updated \"${name}\" Marker`);\n        break;\n      }\n    }\n    // Name does not exist in marker list. Create new marker\n    if (newMarker) {\n      markers.push({ lat, lng, name });\n      message.success(`Added new \"${name}\" Marker`);\n    }\n\n    this.setState({ markers });\n  });\n\n  // Runs once when the Google Maps library is ready\n  // Initializes all services that we need\n  apiHasLoaded = ((map, mapsApi) => {\n    this.setState({\n      mapsLoaded: true,\n      map,\n      mapsApi,\n      singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n      autoCompleteService: new mapsApi.places.AutocompleteService(),\n      placesService: new mapsApi.places.PlacesService(map),\n      geoCoderService: new mapsApi.Geocoder(),\n      directionService: new mapsApi.DirectionsService(),\n    });\n  });\n\n  // With the constraints, find some places serving ice-cream\n  handleSearch = (() => {\n    const { markers, constraints, placesService, directionService, mapsApi } = this.state;\n    if (markers.length === 0) {\n      message.warn('Add a constraint and try again!');\n      return;\n    }\n    const filteredResults = [];\n    const marker = markers[0];\n    const timeLimit = constraints[0].time;\n    const markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\n\n    const placesRequest = {\n      location: markerLatLng,\n      // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n      type: ['restaurant', 'cafe'], // List of types: https://developers.google.com/places/supported_types\n      query: 'ice cream',\n      rankBy: mapsApi.places.RankBy.DISTANCE, // Cannot be used with radius.\n    };\n\n    // First, search for ice cream shops.\n    placesService.textSearch(placesRequest, ((response) => {\n      // Only look at the nearest top 5.\n      const responseLimit = Math.min(5, response.length);\n      for (let i = 0; i < responseLimit; i++) {\n        const iceCreamPlace = response[i];\n        const { rating, name } = iceCreamPlace;\n        const address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n        const priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n        let photoUrl = '';\n        let openNow = false;\n        if (iceCreamPlace.opening_hours) {\n          openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n        }\n        if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n          photoUrl = iceCreamPlace.photos[0].getUrl();\n        }\n\n        // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n        const directionRequest = {\n          origin: markerLatLng,\n          destination: address, // Address of ice cream place\n          travelMode: 'DRIVING',\n        }\n        directionService.route(directionRequest, ((result, status) => {\n          if (status !== 'OK') { return }\n          const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n          const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n          if (travellingTimeInMinutes < timeLimit) {\n            const distanceText = travellingRoute.distance.text; // 6.4km\n            const timeText = travellingRoute.duration.text; // 11 mins\n            filteredResults.push({\n              name,\n              rating,\n              address,\n              openNow,\n              priceLevel,\n              photoUrl,\n              distanceText,\n              timeText,\n            });\n          }\n          // Finally, Add results to state\n          this.setState({ searchResults: filteredResults });\n        }));\n      }\n    }));\n  });\n\n\n  \n\n  render() {\n    const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\n    const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\n    return (\n      <div className=\"w-100 d-flex py-4 flex-wrap justify-content-center\">\n        <h1 className=\"w-100 fw-md\">Find Some Ice-Creams!</h1>\n        {/* Constraints section */}\n        <section className=\"col-4\">\n          {mapsLoaded ?\n            <div>\n              {constraints.map((constraint, key) => {\n                const { name, time } = constraint;\n                return (\n                  <div key={key} className=\"mb-4\">\n                    <div className=\"d-flex mb-2\">\n                      <Input className=\"col-4 mr-2\" placeholder=\"Name\" onChange={(event) => this.updateConstraintName(event, key)} />\n                      <MapAutoComplete\n                        autoCompleteService={autoCompleteService}\n                        geoCoderService={geoCoderService}\n                        singaporeLatLng={singaporeLatLng}\n                        markerName={name}\n                        addMarker={this.addMarker}\n                      />\n                    </div>\n                    <ConstraintSlider\n                      iconType=\"car\"\n                      value={time}\n                      onChange={(value) => this.updateConstraintTime(key, value)}\n                      text=\"Minutes away by car\"\n                    />\n                    <Divider />\n                  </div>\n                );\n              })}\n            </div>\n            : null\n          }\n        </section>\n\n        {/* Maps Section */}\n        <section className=\"col-8 h-lg\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyBj9b-EHxuAAihd8u2HBBqWOSXukFlA3jY\",\n              libraries: ['places', 'directions']\n            }}\n            defaultZoom={11}\n            defaultCenter={{ lat: SG_COOR.lat, lng: SG_COOR.lng }}\n            yesIWantToUseGoogleMapApiInternals={true}\n            onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\n          >\n            {/* Pin markers on the Map*/}\n            {markers.map((marker, key) => {\n              const { name, lat, lng } = marker;\n              return (\n                <MapMarker key={key} name={name} lat={lat} lng={lng} />\n              );\n            })}\n          </GoogleMapReact>\n        </section>\n\n        {/* Search Button */}\n        <Button className=\"mt-4 fw-md\" type=\"primary\" size=\"large\" onClick={this.handleSearch}>Search!</Button>\n\n        {/* Results section */}\n        {searchResults.length > 0 ?\n          <>\n            <Divider />\n            <section className=\"col-12\">\n              <div className=\"d-flex flex-column justify-content-center\">\n                <h1 className=\"mb-4 fw-md\">Tadah! Ice-Creams!</h1>\n                <div className=\"d-flex flex-wrap\">\n                  {searchResults.map((result, key) => (\n                    <PlaceCard info={result} key={key} />\n                  ))}\n                </div>s\n              </div>\n            </section>\n          </>\n          : null}\n      </div>\n    )\n  }\n}\n\nexport default MapsContainer;"]},"metadata":{},"sourceType":"module"}