{"ast":null,"code":"import _regeneratorRuntime from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{Plugins}from\"@capacitor/core\";//import { SMS } from '@ionic-native/sms';\nvar Contacts=Plugins.Contacts,Share=Plugins.Share;var Singleton=function(){var instance;function createInstance(){var ct=new ContactTracing();return ct;}return{getInstance:function getInstance(){if(!instance){instance=createInstance();}return instance;}};}();var ContactTracing=/*#__PURE__*/function(){function ContactTracing(){_classCallCheck(this,ContactTracing);this.contacts=[];this.selected=[];this.conIndex=[];this.symptomList=[{val:\"Cough\",isChecked:false},{val:\"Fever or chills\",isChecked:false},{val:\"Shortness of breath or difficulty breathing\",isChecked:false},{val:\"Fatigue\",isChecked:false},{val:\"Muscle or body aches\",isChecked:false},{val:\"Headaches\",isChecked:false},{val:\"New loss of taste or smell\",isChecked:false},{val:\"Sore throat\",isChecked:false},{val:\"Congestion or runny nose\",isChecked:false},{val:\"Nausea or vomiting\",isChecked:false},{val:\"Diarrhea\",isChecked:false}];this.emergencyList=[{val:\"Trouble breathing\",isChecked:false},{val:\"Persistent pain or pressure in chest\",isChecked:false},{val:\"New confusion\",isChecked:false},{val:\"Inability to wake or stay awake\",isChecked:false},{val:\"Bluish lips or face\",isChecked:false}];}//Getter method for emergency symptoms list\n//Returns list of emergency symptoms to map to ContactTracing display\n//Void input\n//Output: list of {string, boolean} tuples\n_createClass(ContactTracing,[{key:\"getEmergencyList\",value:function getEmergencyList(){return this.emergencyList;}//Getter method for symptoms list\n//Returns list of symptoms to map to ContactTracing display\n//Void input\n//Output: list of {string, boolean} tuples\n},{key:\"getSymptomsList\",value:function getSymptomsList(){return this.symptomList;}//Returns list of selected contacts to map to contact display\n//Void input\n//Output: boolean array of size contacts.length\n},{key:\"getContactIndex\",value:function getContactIndex(){return this.conIndex;}//Saves state of symptoms at index i\n//to list in ContactTracing object\n//Input: number i, 0 < i < symptomList.length\n//Void output\n},{key:\"checkSymptom\",value:function checkSymptom(i){if(i<this.symptomList.length){this.symptomList[i].isChecked=!this.symptomList[i].isChecked;}}//Saves state of emergency symptom at index i\n//to list in ContactTracing object\n//Input: number i, 0 < i < emergencyList.length\n//Void output\n},{key:\"checkEmergency\",value:function checkEmergency(i){if(i<this.emergencyList.length){this.emergencyList[i].isChecked=!this.emergencyList[i].isChecked;}}//Saves state of selected contact at index i\n//Input: number i, 0 < i < contacts.length\n//Void output\n},{key:\"check\",value:function check(i){if(i<this.conIndex.length){this.conIndex[i]=!this.conIndex[i];}}//Getter method for all device contacts\n//Will all async loadContacts method if contacts list has not been populated yet\n//Void input\n//Returns list of Contact objects\n},{key:\"getContacts\",value:function getContacts(){console.log('GRABBING CONTACT LIST FROM OBJECT\\n');//console.log(this.contacts);\nif(this.contacts.length==0){this.loadContacts();}return this.contacts;}//Getter method for selected contacts\n//Void input\n//Returns list of Contact objects that have been selected using select()\n},{key:\"getSelected\",value:function getSelected(){return this.selected;}//Async method to load contacts from device to contacts list.\n//Void input\n//Void output\n},{key:\"loadContacts\",value:function(){var _loadContacts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this=this;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:Contacts.getContacts().then(function(results){_this.contacts=results.contacts;console.log(_this.contacts);for(var i=0;i<_this.contacts.length;i++){_this.conIndex.push(false);}});case 1:case\"end\":return _context.stop();}}},_callee);}));function loadContacts(){return _loadContacts.apply(this,arguments);}return loadContacts;}()//Method called by button GUI\n//Constructs message and calls async function to launch share functionality\n//Void input\n//Void output\n},{key:\"share\",value:function share(){var title=\"Covid-19 Contact Alert!\\nSomeone you have been in contact with is expiercing symptoms. Please take appropriate precautions.\";var link='https://www.cdc.gov/coronavirus/2019-ncov/index.html';var diaTitle='Share with those who you have been in contact with';var message=\"Covid-19 Contact Alert!\\nI am experiencing the following symptoms:\\n\";message+=\"------------------------------\\n\";for(var index in this.emergencyList){if(this.emergencyList[index].isChecked){message+=\"- \"+this.emergencyList[index].val+\" (EMERGENCY symptom!)\\n\";}}for(var index1 in this.symptomList){if(this.symptomList[index1].isChecked){message+=\"- \"+this.symptomList[index1].val+\"\\n\";}}message+=\"------------------------------\\n\";this.sendMessage(title,message,link,diaTitle);}//Async method to launch share functionality\n//Input: string title, string message\n//  title and message to share\n//Void output\n},{key:\"sendMessage\",value:function(){var _sendMessage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(title,message,link,diaTitle){var shareRet;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Share.share({title:title,text:message,url:link,dialogTitle:diaTitle});case 2:shareRet=_context2.sent;if(shareRet){console.log(\"Success!\\n\");}else{console.log(\"Failed\\n\");}console.log(message);case 5:case\"end\":return _context2.stop();}}},_callee2);}));function sendMessage(_x,_x2,_x3,_x4){return _sendMessage.apply(this,arguments);}return sendMessage;}()}]);return ContactTracing;}();export default Singleton;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx"],"names":["Plugins","Contacts","Share","Singleton","instance","createInstance","ct","ContactTracing","getInstance","contacts","selected","conIndex","symptomList","val","isChecked","emergencyList","i","length","console","log","loadContacts","getContacts","then","results","push","title","link","diaTitle","message","index","index1","sendMessage","share","text","url","dialogTitle","shareRet"],"mappings":"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","sourcesContent":["import { Contact } from \"@capacitor-community/contacts\";\nimport { Plugins } from \"@capacitor/core\";\n//import { SMS } from '@ionic-native/sms';\nconst  { Contacts, Share } = Plugins;\n\n\nvar Singleton = (function () {\n  let instance:ContactTracing;\n\n  function createInstance() {\n      var ct = new ContactTracing();\n      return ct;\n  }\n\n  return {\n      getInstance: function () {\n          if (!instance) {\n              instance = createInstance();\n          }\n          return instance;\n      }\n  };\n})();\n\n\nclass ContactTracing {\n  private contacts:Contact[] = [];\n  private selected:Contact[] = [];\n  private conIndex:boolean[] = [];\n\n  private symptomList = [\n    {val: \"Cough\", isChecked: false},\n    {val: \"Fever or chills\", isChecked: false},\n    {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n    {val: \"Fatigue\", isChecked: false},\n    {val: \"Muscle or body aches\", isChecked: false},\n    {val: \"Headaches\", isChecked: false},\n    {val: \"New loss of taste or smell\", isChecked: false},\n    {val: \"Sore throat\", isChecked: false},\n    {val: \"Congestion or runny nose\", isChecked: false},\n    {val: \"Nausea or vomiting\", isChecked: false},\n    {val: \"Diarrhea\", isChecked: false}\n  ]\n  \n  private emergencyList = [\n    {val: \"Trouble breathing\", isChecked: false},\n    {val: \"Persistent pain or pressure in chest\", isChecked: false},\n    {val: \"New confusion\", isChecked: false},\n    {val: \"Inability to wake or stay awake\", isChecked: false},\n    {val: \"Bluish lips or face\", isChecked: false}\n  ]\n\n  public constructor(){\n\n  }\n\n  //Getter method for emergency symptoms list\n  //Returns list of emergency symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n  public getEmergencyList(){\n    return this.emergencyList;\n  }\n\n  //Getter method for symptoms list\n  //Returns list of symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n  public getSymptomsList(){\n    return this.symptomList;\n  }\n\n  //Returns list of selected contacts to map to contact display\n  //Void input\n  //Output: boolean array of size contacts.length\n  public getContactIndex(){\n    return this.conIndex;\n  }\n\n  //Saves state of symptoms at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < symptomList.length\n  //Void output\n  public checkSymptom(i:number){\n    if(i < this.symptomList.length){\n      this.symptomList[i].isChecked = !(this.symptomList[i].isChecked);\n    }\n  }\n  \n  //Saves state of emergency symptom at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < emergencyList.length\n  //Void output\n  public checkEmergency(i:number){\n    if(i < this.emergencyList.length){\n      this.emergencyList[i].isChecked = !(this.emergencyList[i].isChecked);\n    }\n  }\n  \n  //Saves state of selected contact at index i\n  //Input: number i, 0 < i < contacts.length\n  //Void output\n  public check(i:number){\n    if(i < this.conIndex.length){\n      this.conIndex[i] = !(this.conIndex[i]);\n    }\n  }\n  \n  //Getter method for all device contacts\n  //Will all async loadContacts method if contacts list has not been populated yet\n  //Void input\n  //Returns list of Contact objects\n  public getContacts(){\n    console.log('GRABBING CONTACT LIST FROM OBJECT\\n');\n\n    //console.log(this.contacts);\n    if (this.contacts.length == 0){\n      this.loadContacts();\n    }\n    return this.contacts;\n\n  }\n\n  //Getter method for selected contacts\n  //Void input\n  //Returns list of Contact objects that have been selected using select()\n  public getSelected(){\n    return this.selected;\n  }\n\n  //Async method to load contacts from device to contacts list.\n  //Void input\n  //Void output\n  private async loadContacts(){\n    Contacts.getContacts().then(results => {\n    this.contacts = results.contacts;\n    console.log(this.contacts);\n\n    for(var i = 0; i < this.contacts.length; i++){\n      this.conIndex.push(false);\n    }\n    });\n  }\n\n  //Method called by button GUI\n  //Constructs message and calls async function to launch share functionality\n  //Void input\n  //Void output\n  public share(){\n    let title:string = \"Covid-19 Contact Alert!\\nSomeone you have been in contact with is expiercing symptoms. Please take appropriate precautions.\";\n    let link:string = 'https://www.cdc.gov/coronavirus/2019-ncov/index.html';\n    let diaTitle = 'Share with those who you have been in contact with';\n\n    let message:string = \"Covid-19 Contact Alert!\\nI am experiencing the following symptoms:\\n\";\n    message += \"------------------------------\\n\";\n    \n    for(var index in this.emergencyList){\n      if(this.emergencyList[index].isChecked){\n        message += \"- \" + this.emergencyList[index].val + \" (EMERGENCY symptom!)\\n\";\n      }\n    }\n    for(var index1 in this.symptomList){\n      if(this.symptomList[index1].isChecked){\n        message += \"- \" + this.symptomList[index1].val + \"\\n\";\n      }\n    }\n    message += \"------------------------------\\n\";\n\n    this.sendMessage(title,message, link, diaTitle);\n\n  }\n\n  //Async method to launch share functionality\n  //Input: string title, string message\n  //  title and message to share\n  //Void output\n  private async sendMessage(title:string, message:string, link:string, diaTitle:string){\n\n    let shareRet = await Share.share({\n      title: title,\n      text: message,\n      url: link,\n      dialogTitle: diaTitle\n    });\n\n    if (shareRet){\n      console.log(\"Success!\\n\");\n    }else{\n      console.log(\"Failed\\n\");\n    }\n    console.log(message);\n\n  }\n}\nexport default Singleton;\n\n\n"]},"metadata":{},"sourceType":"module"}