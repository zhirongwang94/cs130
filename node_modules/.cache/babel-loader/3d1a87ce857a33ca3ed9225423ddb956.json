{"ast":null,"code":"var _jsxFileName = \"/Users/zhirongwang/Desktop/cs130/src/components/MapAutoComplete.js\";\nimport React, { Component } from 'react';\nimport { AutoComplete } from 'antd';\n\nclass MapAutoComplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelect = value => {\n      this.state.geoCoderService.geocode({\n        address: value\n      }, response => {\n        const {\n          location\n        } = response[0].geometry;\n        this.props.addMarker(location.lat(), location.lng(), this.props.markerName);\n      });\n    };\n\n    this.handleSearch = value => {\n      const {\n        autoCompleteService,\n        singaporeLatLng\n      } = this.state; // Search only if there is a string\n\n      if (value.length > 0) {\n        const searchQuery = {\n          input: value,\n          location: singaporeLatLng,\n          // Search in Singapore\n          radius: 30000 // With a 30km radius\n\n        };\n        autoCompleteService.getQueryPredictions(searchQuery, response => {\n          // The name of each GoogleMaps suggestion object is in the \"description\" field\n          if (response) {\n            const dataSource = response.map(resp => resp.description);\n            this.setState({\n              dataSource,\n              suggestions: response\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      suggestionts: [],\n      dataSource: [],\n      singaporeLatLng: this.props.singaporeLatLng,\n      autoCompleteService: this.props.autoCompleteService,\n      geoCoderService: this.props.geoCoderService\n    };\n  } // Runs after clicking away from the input field or pressing 'enter'.\n  // Geocode the location selected to be created as a marker.\n\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    return /*#__PURE__*/React.createElement(AutoComplete, {\n      className: \"w-100\",\n      dataSource: dataSource,\n      onSelect: this.onSelect,\n      onSearch: this.handleSearch,\n      placeholder: \"Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default MapAutoComplete;","map":{"version":3,"sources":["/Users/zhirongwang/Desktop/cs130/src/components/MapAutoComplete.js"],"names":["React","Component","AutoComplete","MapAutoComplete","constructor","props","onSelect","value","state","geoCoderService","geocode","address","response","location","geometry","addMarker","lat","lng","markerName","handleSearch","autoCompleteService","singaporeLatLng","length","searchQuery","input","radius","getQueryPredictions","dataSource","map","resp","description","setState","suggestions","suggestionts","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,MAA7B;;AAEA,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AACtCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,QAbmB,GAaNC,KAAD,IAAW;AACrB,WAAKC,KAAL,CAAWC,eAAX,CAA2BC,OAA3B,CAAmC;AAAEC,QAAAA,OAAO,EAAEJ;AAAX,OAAnC,EAAyDK,QAAD,IAAc;AACpE,cAAM;AAAEC,UAAAA;AAAF,YAAeD,QAAQ,CAAC,CAAD,CAAR,CAAYE,QAAjC;AACA,aAAKT,KAAL,CAAWU,SAAX,CAAqBF,QAAQ,CAACG,GAAT,EAArB,EAAqCH,QAAQ,CAACI,GAAT,EAArC,EAAqD,KAAKZ,KAAL,CAAWa,UAAhE;AACD,OAHD;AAID,KAlBkB;;AAAA,SAsBnBC,YAtBmB,GAsBFZ,KAAD,IAAW;AACzB,YAAM;AAAEa,QAAAA,mBAAF;AAAuBC,QAAAA;AAAvB,UAA2C,KAAKb,KAAtD,CADyB,CAEzB;;AACA,UAAID,KAAK,CAACe,MAAN,GAAe,CAAnB,EAAsB;AACpB,cAAMC,WAAW,GAAG;AAClBC,UAAAA,KAAK,EAAEjB,KADW;AAElBM,UAAAA,QAAQ,EAAEQ,eAFQ;AAES;AAC3BI,UAAAA,MAAM,EAAE,KAHU,CAGH;;AAHG,SAApB;AAKAL,QAAAA,mBAAmB,CAACM,mBAApB,CAAwCH,WAAxC,EAAuDX,QAAD,IAAc;AAClE;AACA,cAAIA,QAAJ,EAAc;AACZ,kBAAMe,UAAU,GAAGf,QAAQ,CAACgB,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACC,WAA5B,CAAnB;AACA,iBAAKC,QAAL,CAAc;AAAEJ,cAAAA,UAAF;AAAcK,cAAAA,WAAW,EAAEpB;AAA3B,aAAd;AACD;AACF,SAND;AAOD;AACF,KAvCkB;;AAEjB,SAAKJ,KAAL,GAAa;AACXyB,MAAAA,YAAY,EAAE,EADH;AAEXN,MAAAA,UAAU,EAAE,EAFD;AAGXN,MAAAA,eAAe,EAAE,KAAKhB,KAAL,CAAWgB,eAHjB;AAIXD,MAAAA,mBAAmB,EAAE,KAAKf,KAAL,CAAWe,mBAJrB;AAKXX,MAAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWI;AALjB,KAAb;AAOD,GAVqC,CAYtC;AACA;;;AA6BAyB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA;AAAF,QAAiB,KAAKnB,KAA5B;AACA,wBACE,oBAAC,YAAD;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,UAAU,EAAEmB,UAFd;AAGE,MAAA,QAAQ,EAAE,KAAKrB,QAHjB;AAIE,MAAA,QAAQ,EAAE,KAAKa,YAJjB;AAKE,MAAA,WAAW,EAAC,SALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AArDqC;;AAwDxC,eAAehB,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport { AutoComplete } from 'antd';\n\nclass MapAutoComplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestionts: [],\n      dataSource: [],\n      singaporeLatLng: this.props.singaporeLatLng,\n      autoCompleteService: this.props.autoCompleteService,\n      geoCoderService: this.props.geoCoderService,\n    }\n  }\n\n  // Runs after clicking away from the input field or pressing 'enter'.\n  // Geocode the location selected to be created as a marker.\n  onSelect = ((value) => {\n    this.state.geoCoderService.geocode({ address: value }, ((response) => {\n      const { location } = response[0].geometry;\n      this.props.addMarker(location.lat(), location.lng(), this.props.markerName);\n    }))\n  });\n\n\n  // Runs a search on the current value as the user types in the AutoComplete field.\n  handleSearch = ((value) => {\n    const { autoCompleteService, singaporeLatLng } = this.state;\n    // Search only if there is a string\n    if (value.length > 0) {\n      const searchQuery = {\n        input: value,\n        location: singaporeLatLng, // Search in Singapore\n        radius: 30000, // With a 30km radius\n      };\n      autoCompleteService.getQueryPredictions(searchQuery, ((response) => {\n        // The name of each GoogleMaps suggestion object is in the \"description\" field\n        if (response) {\n          const dataSource = response.map((resp) => resp.description);\n          this.setState({ dataSource, suggestions: response });\n        }\n      }));\n    }\n  });\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        className=\"w-100\"\n        dataSource={dataSource}\n        onSelect={this.onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"Address\"\n      />\n    );\n  }\n}\n\nexport default MapAutoComplete;"]},"metadata":{},"sourceType":"module"}