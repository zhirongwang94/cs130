{"ast":null,"code":"import { Plugins } from \"@capacitor/core\"; //import { SMS } from '@ionic-native/sms';\n\nconst {\n  Contacts,\n  Share\n} = Plugins;\n\nvar Singleton = function () {\n  let instance;\n\n  function createInstance() {\n    var ct = new ContactTracing();\n    return ct;\n  }\n\n  return {\n    getInstance: function () {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      return instance;\n    }\n  };\n}();\n\nclass ContactTracing {\n  constructor() {\n    this.contacts = [];\n    this.selected = [];\n    this.conIndex = [];\n    this.symptomList = [{\n      val: \"Cough\",\n      isChecked: false\n    }, {\n      val: \"Fever or chills\",\n      isChecked: false\n    }, {\n      val: \"Shortness of breath or difficulty breathing\",\n      isChecked: false\n    }, {\n      val: \"Fatigue\",\n      isChecked: false\n    }, {\n      val: \"Muscle or body aches\",\n      isChecked: false\n    }, {\n      val: \"Headaches\",\n      isChecked: false\n    }, {\n      val: \"New loss of taste or smell\",\n      isChecked: false\n    }, {\n      val: \"Sore throat\",\n      isChecked: false\n    }, {\n      val: \"Congestion or runny nose\",\n      isChecked: false\n    }, {\n      val: \"Nausea or vomiting\",\n      isChecked: false\n    }, {\n      val: \"Diarrhea\",\n      isChecked: false\n    }];\n    this.emergencyList = [{\n      val: \"Trouble breathing\",\n      isChecked: false\n    }, {\n      val: \"Persistent pain or pressure in chest\",\n      isChecked: false\n    }, {\n      val: \"New confusion\",\n      isChecked: false\n    }, {\n      val: \"Inability to wake or stay awake\",\n      isChecked: false\n    }, {\n      val: \"Bluish lips or face\",\n      isChecked: false\n    }];\n  } //Getter method for emergency symptoms list\n  //Returns list of emergency symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n\n\n  getEmergencyList() {\n    return this.emergencyList;\n  } //Getter method for symptoms list\n  //Returns list of symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n\n\n  getSymptomsList() {\n    return this.symptomList;\n  } //Returns list of selected contacts to map to contact display\n  //Void input\n  //Output: boolean array of size contacts.length\n\n\n  getContactIndex() {\n    return this.conIndex;\n  } //Saves state of symptoms at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < symptomList.length\n  //Void output\n\n\n  checkSymptom(i) {\n    if (i < this.symptomList.length) {\n      this.symptomList[i].isChecked = !this.symptomList[i].isChecked;\n    }\n  } //Saves state of emergency symptom at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < emergencyList.length\n  //Void output\n\n\n  checkEmergency(i) {\n    if (i < this.emergencyList.length) {\n      this.emergencyList[i].isChecked = !this.emergencyList[i].isChecked;\n    }\n  } //Saves state of selected contact at index i\n  //Input: number i, 0 < i < contacts.length\n  //Void output\n\n\n  check(i) {\n    if (i < this.conIndex.length) {\n      this.conIndex[i] = !this.conIndex[i];\n    }\n  } //Getter method for all device contacts\n  //Will all async loadContacts method if contacts list has not been populated yet\n  //Void input\n  //Returns list of Contact objects\n\n\n  getContacts() {\n    console.log('GRABBING CONTACT LIST FROM OBJECT\\n'); //console.log(this.contacts);\n\n    if (this.contacts.length == 0) {\n      this.loadContacts();\n    }\n\n    return this.contacts;\n  } //Getter method for selected contacts\n  //Void input\n  //Returns list of Contact objects that have been selected using select()\n\n\n  getSelected() {\n    return this.selected;\n  } //Async method to load contacts from device to contacts list.\n  //Void input\n  //Void output\n\n\n  async loadContacts() {\n    Contacts.getContacts().then(results => {\n      this.contacts = results.contacts;\n      console.log(this.contacts);\n\n      for (var i = 0; i < this.contacts.length; i++) {\n        this.conIndex.push(false);\n      }\n    });\n  } //Method called by button GUI\n  //Constructs message and calls async function to launch share functionality\n  //Void input\n  //Void output\n\n\n  share() {\n    let title = \"Covid-19 Contact Alert!\\nSomeone you have been in contact with is expiercing symptoms. Please take appropriate precautions.\";\n    let link = 'https://www.cdc.gov/coronavirus/2019-ncov/index.html';\n    let diaTitle = 'Share with those who you have been in contact with';\n    let message = \"Covid-19 Contact Alert!\\nI am experiencing the following symptoms.\\n\";\n    let eMes = \"\";\n\n    for (var index in this.emergencyList) {\n      if (this.emergencyList[index].isChecked) {\n        eMes += this.emergencyList[index].val + \" (EMERGENCY symptom!)\\n\";\n      }\n    }\n\n    let sMes = \"\";\n\n    for (var index1 in this.symptomList) {\n      if (this.symptomList[index1].isChecked) {\n        sMes += this.symptomList[index1].val + \"\\n\";\n      }\n    }\n\n    if (eMes != \"\") {\n      message += \"------------------------------\\n\";\n      message += eMes;\n    }\n\n    if (sMes != \"\") {\n      message += \"------------------------------\\n\";\n      message += sMes;\n    }\n\n    this.sendMessage(title, message, link, diaTitle);\n  } //Async method to launch share functionality\n  //Input: string title, string message\n  //  title and message to share\n  //Void output\n\n\n  async sendMessage(title, message, link, diaTitle) {\n    let shareRet = await Share.share({\n      title: title,\n      text: message,\n      url: link,\n      dialogTitle: diaTitle\n    });\n\n    if (shareRet) {\n      console.log(\"Success!\\n\");\n    } else {\n      console.log(\"Failed\\n\");\n    }\n\n    console.log(message);\n  }\n\n}\n\nexport default Singleton;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx"],"names":["Plugins","Contacts","Share","Singleton","instance","createInstance","ct","ContactTracing","getInstance","constructor","contacts","selected","conIndex","symptomList","val","isChecked","emergencyList","getEmergencyList","getSymptomsList","getContactIndex","checkSymptom","i","length","checkEmergency","check","getContacts","console","log","loadContacts","getSelected","then","results","push","share","title","link","diaTitle","message","eMes","index","sMes","index1","sendMessage","shareRet","text","url","dialogTitle"],"mappings":"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","sourcesContent":["import { Contact } from \"@capacitor-community/contacts\";\nimport { Plugins } from \"@capacitor/core\";\n//import { SMS } from '@ionic-native/sms';\nconst  { Contacts, Share } = Plugins;\n\n\nvar Singleton = (function () {\n  let instance:ContactTracing;\n\n  function createInstance() {\n      var ct = new ContactTracing();\n      return ct;\n  }\n\n  return {\n      getInstance: function () {\n          if (!instance) {\n              instance = createInstance();\n          }\n          return instance;\n      }\n  };\n})();\n\n\nclass ContactTracing {\n  private contacts:Contact[] = [];\n  private selected:Contact[] = [];\n  private conIndex:boolean[] = [];\n\n  private symptomList = [\n    {val: \"Cough\", isChecked: false},\n    {val: \"Fever or chills\", isChecked: false},\n    {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n    {val: \"Fatigue\", isChecked: false},\n    {val: \"Muscle or body aches\", isChecked: false},\n    {val: \"Headaches\", isChecked: false},\n    {val: \"New loss of taste or smell\", isChecked: false},\n    {val: \"Sore throat\", isChecked: false},\n    {val: \"Congestion or runny nose\", isChecked: false},\n    {val: \"Nausea or vomiting\", isChecked: false},\n    {val: \"Diarrhea\", isChecked: false}\n  ]\n  \n  private emergencyList = [\n    {val: \"Trouble breathing\", isChecked: false},\n    {val: \"Persistent pain or pressure in chest\", isChecked: false},\n    {val: \"New confusion\", isChecked: false},\n    {val: \"Inability to wake or stay awake\", isChecked: false},\n    {val: \"Bluish lips or face\", isChecked: false}\n  ]\n\n  public constructor(){\n\n  }\n\n  //Getter method for emergency symptoms list\n  //Returns list of emergency symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n  public getEmergencyList(){\n    return this.emergencyList;\n  }\n\n  //Getter method for symptoms list\n  //Returns list of symptoms to map to ContactTracing display\n  //Void input\n  //Output: list of {string, boolean} tuples\n  public getSymptomsList(){\n    return this.symptomList;\n  }\n\n  //Returns list of selected contacts to map to contact display\n  //Void input\n  //Output: boolean array of size contacts.length\n  public getContactIndex(){\n    return this.conIndex;\n  }\n\n  //Saves state of symptoms at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < symptomList.length\n  //Void output\n  public checkSymptom(i:number){\n    if(i < this.symptomList.length){\n      this.symptomList[i].isChecked = !(this.symptomList[i].isChecked);\n    }\n  }\n  \n  //Saves state of emergency symptom at index i\n  //to list in ContactTracing object\n  //Input: number i, 0 < i < emergencyList.length\n  //Void output\n  public checkEmergency(i:number){\n    if(i < this.emergencyList.length){\n      this.emergencyList[i].isChecked = !(this.emergencyList[i].isChecked);\n    }\n  }\n  \n  //Saves state of selected contact at index i\n  //Input: number i, 0 < i < contacts.length\n  //Void output\n  public check(i:number){\n    if(i < this.conIndex.length){\n      this.conIndex[i] = !(this.conIndex[i]);\n    }\n  }\n  \n  //Getter method for all device contacts\n  //Will all async loadContacts method if contacts list has not been populated yet\n  //Void input\n  //Returns list of Contact objects\n  public getContacts(){\n    console.log('GRABBING CONTACT LIST FROM OBJECT\\n');\n\n    //console.log(this.contacts);\n    if (this.contacts.length == 0){\n      this.loadContacts();\n    }\n    return this.contacts;\n\n  }\n\n  //Getter method for selected contacts\n  //Void input\n  //Returns list of Contact objects that have been selected using select()\n  public getSelected(){\n    return this.selected;\n  }\n\n  //Async method to load contacts from device to contacts list.\n  //Void input\n  //Void output\n  private async loadContacts(){\n    Contacts.getContacts().then(results => {\n    this.contacts = results.contacts;\n    console.log(this.contacts);\n\n    for(var i = 0; i < this.contacts.length; i++){\n      this.conIndex.push(false);\n    }\n    });\n  }\n\n  //Method called by button GUI\n  //Constructs message and calls async function to launch share functionality\n  //Void input\n  //Void output\n  public share(){\n    let title:string = \"Covid-19 Contact Alert!\\nSomeone you have been in contact with is expiercing symptoms. Please take appropriate precautions.\";\n    let link:string = 'https://www.cdc.gov/coronavirus/2019-ncov/index.html';\n    let diaTitle = 'Share with those who you have been in contact with';\n\n    let message:string = \"Covid-19 Contact Alert!\\nI am experiencing the following symptoms.\\n\";\n    \n    let eMes = \"\";\n    for(var index in this.emergencyList){\n      if(this.emergencyList[index].isChecked){\n        eMes += this.emergencyList[index].val + \" (EMERGENCY symptom!)\\n\";\n      }\n    }\n    let sMes = \"\";\n    for(var index1 in this.symptomList){\n      if(this.symptomList[index1].isChecked){\n        sMes += this.symptomList[index1].val + \"\\n\";\n      }\n    }\n\n    if (eMes != \"\"){\n      message += \"------------------------------\\n\";\n      message += eMes;\n    }\n    if(sMes != \"\"){\n      message += \"------------------------------\\n\";\n      message += sMes;\n    }\n\n    this.sendMessage(title,message, link, diaTitle);\n  }\n\n  //Async method to launch share functionality\n  //Input: string title, string message\n  //  title and message to share\n  //Void output\n  private async sendMessage(title:string, message:string, link:string, diaTitle:string){\n\n    let shareRet = await Share.share({\n      title: title,\n      text: message,\n      url: link,\n      dialogTitle: diaTitle\n    });\n\n    if (shareRet){\n      console.log(\"Success!\\n\");\n    }else{\n      console.log(\"Failed\\n\");\n    }\n    console.log(message);\n\n  }\n}\nexport default Singleton;\n\n\n"]},"metadata":{},"sourceType":"module"}