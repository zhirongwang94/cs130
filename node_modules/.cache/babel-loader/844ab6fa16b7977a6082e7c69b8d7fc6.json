{"ast":null,"code":"var _jsxFileName = \"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx\";\nimport { Plugins } from \"@capacitor/core\";\nimport { IonBackdrop, IonContent } from \"@ionic/react\";\nconst {\n  Contacts\n} = Plugins;\nexport default class ContactTracing {\n  constructor() {\n    this.contacts = [];\n  }\n\n  sendMessage() {\n    this.loadContacts();\n    this.displayContact();\n  }\n\n  displayContact() {\n    const displayContacts = () => {\n      return /*#__PURE__*/React.createElement(IonContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(IonBackdrop, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }\n      }));\n    };\n  } // private onSuccess(contacts:Contact[]){\n  //   console.log(contacts.length + ' contacts found');\n  //   for(var i = 0; i < contacts.length; i++) {\n  //     console.log(contacts[i].contactId + \" - \" + contacts[i].displayName);\n  //     for(var j = 0; j < contacts[i].phoneNumbers.length; j++) {\n  //        var phone = contacts[i].phoneNumbers[j];\n  //        console.log(\"===> \" + phone + \"\\n\");\n  //     }\n  //  }\n  // }\n  // private onError(error:string){\n  //   console.log(\"Error grabbing contacts! \" + error);\n  // }\n\n\n  async loadContacts() {\n    Contacts.getContacts().then(results => {\n      console.log(results);\n      this.contacts = results.contacts; // for (const contact of results.contacts) {\n      //     console.log(contact);\n      // }\n    });\n    console.log(\"Contacts Loaded! \\n\");\n  } // sendSms(){\n  //   var message:String = \"\";\n  //   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n  //   for(var index in emergencyList){\n  //     if(emergencyList[index].isChecked){\n  //       message += emergencyList[index].val + \"\\n\";\n  //     }\n  //   }\n  //   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n  //   for(var index in symptomList){\n  //     if(symptomList[index].isChecked){\n  //       message += symptomList[index].val + \"\\n\";\n  //     }\n  //   }\n  //   alert(\"Symptoms List \\n\" + message);\n  //   SMS.send('5167120628', \"test sms\");\n  //   alert(\"sendSms was called!\");\n  // }\n\n\n}","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx"],"names":["Plugins","IonBackdrop","IonContent","Contacts","ContactTracing","constructor","contacts","sendMessage","loadContacts","displayContact","displayContacts","getContacts","then","results","console","log"],"mappings":";AACA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAAmBC,WAAnB,EAAgCC,UAAhC,QAAkD,cAAlD;AAEA,MAAO;AAAEC,EAAAA;AAAF,IAAeH,OAAtB;AAGA,eAAe,MAAMI,cAAN,CAAqB;AAEhCC,EAAAA,WAAW,GAAE;AAAA,SADbC,QACa,GADQ,EACR;AAEZ;;AAEDC,EAAAA,WAAW,GAAE;AACX,SAAKC,YAAL;AACA,SAAKC,cAAL;AAED;;AAEDA,EAAAA,cAAc,GAAE;AACd,UAAMC,eAAyB,GAAG,MAAM;AACtC,0BACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAOH,KARC;AASD,GAtB+B,CAwBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,QAAMF,YAAN,GAAoB;AAChBL,IAAAA,QAAQ,CAACQ,WAAT,GAAuBC,IAAvB,CAA4BC,OAAO,IAAI;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,WAAKP,QAAL,GAAgBO,OAAO,CAACP,QAAxB,CAFuC,CAGvC;AACA;AACA;AACH,KANG;AAQFQ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,GAjD+B,CAoDhC;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAzEgC","sourcesContent":["import { Contact } from \"@capacitor-community/contacts\";\nimport { Plugins } from \"@capacitor/core\";\nimport { IonAlert, IonBackdrop, IonContent } from \"@ionic/react\";\n\nconst  { Contacts } = Plugins;\n\n\nexport default class ContactTracing {\n    contacts:Contact[] = [];\n    constructor(){\n  \n    }\n\n    sendMessage(){\n      this.loadContacts();\n      this.displayContact();\n      \n    }\n\n    displayContact(){\n      const displayContacts: React.FC = () => {\n        return(\n            <IonContent>\n                <IonBackdrop>\n                    \n                </IonBackdrop>\n            </IonContent>\n        )\n    };\n    }\n\n    // private onSuccess(contacts:Contact[]){\n    //   console.log(contacts.length + ' contacts found');\n    //   for(var i = 0; i < contacts.length; i++) {\n    //     console.log(contacts[i].contactId + \" - \" + contacts[i].displayName);\n    //     for(var j = 0; j < contacts[i].phoneNumbers.length; j++) {\n    //        var phone = contacts[i].phoneNumbers[j];\n    //        console.log(\"===> \" + phone + \"\\n\");\n    //     }\n    //  }\n    // }\n\n    // private onError(error:string){\n    //   console.log(\"Error grabbing contacts! \" + error);\n    // }\n  \n    async loadContacts(){\n        Contacts.getContacts().then(results => {\n        console.log(results);\n        this.contacts = results.contacts;\n        // for (const contact of results.contacts) {\n        //     console.log(contact);\n        // }\n    });\n  \n      console.log(\"Contacts Loaded! \\n\");\n    }\n  \n   \n    // sendSms(){\n     \n    //   var message:String = \"\";\n  \n    //   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n    //   for(var index in emergencyList){\n    //     if(emergencyList[index].isChecked){\n    //       message += emergencyList[index].val + \"\\n\";\n    //     }\n    //   }\n  \n    //   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n    //   for(var index in symptomList){\n    //     if(symptomList[index].isChecked){\n    //       message += symptomList[index].val + \"\\n\";\n    //     }\n    //   }\n  \n    //   alert(\"Symptoms List \\n\" + message);\n    //   SMS.send('5167120628', \"test sms\");\n    //   alert(\"sendSms was called!\");\n    // }\n\n  \n  }"]},"metadata":{},"sourceType":"module"}