{"ast":null,"code":"import { Plugins } from \"@capacitor/core\";\nconst {\n  Contacts\n} = Plugins; //MAke this class singleton?\n\nvar Singleton = function () {\n  let instance;\n\n  function createInstance() {\n    var ct = new ContactTracing();\n    return ct;\n  }\n\n  return {\n    getInstance: function () {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      return instance;\n    }\n  };\n}();\n\nclass ContactTracing {\n  constructor() {\n    this.contacts = [];\n    this.selected = [];\n    this.conIndex = [];\n    this.symptomList = [{\n      val: \"Cough\",\n      isChecked: false\n    }, {\n      val: \"Fever or chills\",\n      isChecked: false\n    }, {\n      val: \"Shortness of breath or difficulty breathing\",\n      isChecked: false\n    }, {\n      val: \"Fatigue\",\n      isChecked: false\n    }, {\n      val: \"Muscle or body aches\",\n      isChecked: false\n    }, {\n      val: \"Headaches\",\n      isChecked: false\n    }, {\n      val: \"New loss of taste or smell\",\n      isChecked: false\n    }, {\n      val: \"Sore throat\",\n      isChecked: false\n    }, {\n      val: \"Congestion or runny nose\",\n      isChecked: false\n    }, {\n      val: \"Nausea or vomiting\",\n      isChecked: false\n    }, {\n      val: \"Diarrhea\",\n      isChecked: false\n    }];\n    this.emergencyList = [{\n      val: \"Trouble breathing\",\n      isChecked: false\n    }, {\n      val: \"Persistent pain or pressure in chest\",\n      isChecked: false\n    }, {\n      val: \"New confusion\",\n      isChecked: false\n    }, {\n      val: \"Inability to wake or stay awake\",\n      isChecked: false\n    }, {\n      val: \"Bluish lips or face\",\n      isChecked: false\n    }];\n    this.loadContacts();\n  }\n\n  getEmergencyList() {\n    return this.emergencyList;\n  }\n\n  getSymptomsList() {\n    return this.symptomList;\n  }\n\n  getContactIndex() {\n    return this.conIndex;\n  }\n\n  checkSymptom(i) {\n    if (i < this.symptomList.length) {\n      this.symptomList[i].isChecked = !this.symptomList[i].isChecked;\n    }\n  }\n\n  checkEmergency(i) {\n    if (i < this.emergencyList.length) {\n      this.emergencyList[i].isChecked = !this.emergencyList[i].isChecked;\n    }\n  } //Updates list of \n\n\n  check(i) {\n    if (i < this.conIndex.length) {\n      this.conIndex[i] = !this.conIndex[i];\n    }\n  } //Getter method for all device contacts\n  //Void input\n  //Returns list of Contact objects\n\n\n  getContacts() {\n    return this.contacts;\n    console.log('GRABBING CONTACT LIST FROM OBJECT\\n');\n    console.log();\n  } //Getter method for selected device contacts\n  //Void input\n  //Returns list of Contact objects\n\n\n  getSelected() {\n    return this.selected;\n  }\n\n  sendMessage() {//displayContacts(this.contacts, this.selected);\n    //sendSms()\n  }\n\n  sendSMS() {}\n\n  select(indexes) {\n    for (let i = 0; i < indexes.length; i++) {\n      if (indexes[i]) {\n        this.selected.push(this.contacts[i]);\n      }\n    }\n  }\n\n  async loadContacts() {\n    Contacts.getContacts().then(results => {\n      this.contacts = results.contacts;\n      console.log(this.contacts);\n\n      for (var i = 0; i < this.contacts.length; i++) {\n        this.conIndex.push(false);\n      }\n    });\n  } // private onSuccess(contacts:Contact[]){\n  //   console.log(contacts.length + ' contacts found');\n  //   for(var i = 0; i < contacts.length; i++) {\n  //     console.log(contacts[i].contactId + \" - \" + contacts[i].displayName);\n  //     for(var j = 0; j < contacts[i].phoneNumbers.length; j++) {\n  //        var phone = contacts[i].phoneNumbers[j];\n  //        console.log(\"===> \" + phone + \"\\n\");\n  //     }\n  //  }\n  // }\n  // private onError(error:string){\n  //   console.log(\"Error grabbing contacts! \" + error);\n  // }\n  // sendSms(){\n  //   var message:String = \"\";\n  //   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n  //   for(var index in emergencyList){\n  //     if(emergencyList[index].isChecked){\n  //       message += emergencyList[index].val + \"\\n\";\n  //     }\n  //   }\n  //   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n  //   for(var index in symptomList){\n  //     if(symptomList[index].isChecked){\n  //       message += symptomList[index].val + \"\\n\";\n  //     }\n  //   }\n  //   alert(\"Symptoms List \\n\" + message);\n  //   SMS.send('5167120628', \"test sms\");\n  //   alert(\"sendSms was called!\");\n  // }\n\n\n}\n\nexport default Singleton;","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx"],"names":["Plugins","Contacts","Singleton","instance","createInstance","ct","ContactTracing","getInstance","constructor","contacts","selected","conIndex","symptomList","val","isChecked","emergencyList","loadContacts","getEmergencyList","getSymptomsList","getContactIndex","checkSymptom","i","length","checkEmergency","check","getContacts","console","log","getSelected","sendMessage","sendSMS","select","indexes","push","then","results"],"mappings":"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","sourcesContent":["import { Contact } from \"@capacitor-community/contacts\";\nimport { Plugins } from \"@capacitor/core\";\n\nconst  { Contacts } = Plugins;\n\n//MAke this class singleton?\n\nvar Singleton = (function () {\n  let instance:ContactTracing;\n\n  function createInstance() {\n      var ct = new ContactTracing();\n      return ct;\n  }\n\n  return {\n      getInstance: function () {\n          if (!instance) {\n              instance = createInstance();\n          }\n          return instance;\n      }\n  };\n})();\n\n class ContactTracing {\n  private contacts:Contact[] = [];\n  private selected:Contact[] = [];\n  private conIndex:boolean[] = [];\n\n  private symptomList = [\n    {val: \"Cough\", isChecked: false},\n    {val: \"Fever or chills\", isChecked: false},\n    {val: \"Shortness of breath or difficulty breathing\", isChecked: false},\n    {val: \"Fatigue\", isChecked: false},\n    {val: \"Muscle or body aches\", isChecked: false},\n    {val: \"Headaches\", isChecked: false},\n    {val: \"New loss of taste or smell\", isChecked: false},\n    {val: \"Sore throat\", isChecked: false},\n    {val: \"Congestion or runny nose\", isChecked: false},\n    {val: \"Nausea or vomiting\", isChecked: false},\n    {val: \"Diarrhea\", isChecked: false}\n  ]\n  \n  private emergencyList = [\n    {val: \"Trouble breathing\", isChecked: false},\n    {val: \"Persistent pain or pressure in chest\", isChecked: false},\n    {val: \"New confusion\", isChecked: false},\n    {val: \"Inability to wake or stay awake\", isChecked: false},\n    {val: \"Bluish lips or face\", isChecked: false}\n  ]\n\n  public constructor(){\n    this.loadContacts();\n  }\n\n  public getEmergencyList(){\n    return this.emergencyList;\n  }\n\n  public getSymptomsList(){\n    return this.symptomList;\n  }\n\n  public getContactIndex(){\n    return this.conIndex;\n  }\n\n  public checkSymptom(i:number){\n    if(i < this.symptomList.length){\n      this.symptomList[i].isChecked = !(this.symptomList[i].isChecked);\n    }\n  }\n  public checkEmergency(i:number){\n    if(i < this.emergencyList.length){\n      this.emergencyList[i].isChecked = !(this.emergencyList[i].isChecked);\n    }\n  }\n  \n  //Updates list of \n  public check(i:number){\n    if(i < this.conIndex.length){\n      this.conIndex[i] = !(this.conIndex[i]);\n    }\n  }\n  \n  //Getter method for all device contacts\n  //Void input\n  //Returns list of Contact objects\n  public getContacts(){\n    return this.contacts\n    console.log('GRABBING CONTACT LIST FROM OBJECT\\n')\n    console.log()\n  }\n\n  //Getter method for selected device contacts\n  //Void input\n  //Returns list of Contact objects\n  public getSelected(){\n    return this.selected;\n  }\n\n\n  public sendMessage(){\n    \n    //displayContacts(this.contacts, this.selected);\n    //sendSms()\n  }\n\n  sendSMS(){\n    \n  }\n\n  public select(indexes:boolean[]){\n    for (let i = 0; i < indexes.length; i++){\n        if(indexes[i]){\n            this.selected.push(this.contacts[i]);\n        }\n    }\n  }\n\n  private async loadContacts(){\n    Contacts.getContacts().then(results => {\n    this.contacts = results.contacts;\n    console.log(this.contacts);\n\n    for(var i = 0; i < this.contacts.length; i++){\n      this.conIndex.push(false);\n    }\n    });\n  }\n\n  // private onSuccess(contacts:Contact[]){\n  //   console.log(contacts.length + ' contacts found');\n  //   for(var i = 0; i < contacts.length; i++) {\n  //     console.log(contacts[i].contactId + \" - \" + contacts[i].displayName);\n  //     for(var j = 0; j < contacts[i].phoneNumbers.length; j++) {\n  //        var phone = contacts[i].phoneNumbers[j];\n  //        console.log(\"===> \" + phone + \"\\n\");\n  //     }\n  //  }\n  // }\n\n  // private onError(error:string){\n  //   console.log(\"Error grabbing contacts! \" + error);\n  // }\n\n\n\n\n\n  \n  // sendSms(){\n    \n  //   var message:String = \"\";\n\n  //   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n  //   for(var index in emergencyList){\n  //     if(emergencyList[index].isChecked){\n  //       message += emergencyList[index].val + \"\\n\";\n  //     }\n  //   }\n\n  //   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n  //   for(var index in symptomList){\n  //     if(symptomList[index].isChecked){\n  //       message += symptomList[index].val + \"\\n\";\n  //     }\n  //   }\n\n  //   alert(\"Symptoms List \\n\" + message);\n  //   SMS.send('5167120628', \"test sms\");\n  //   alert(\"sendSms was called!\");\n  // }\n\n\n}\nexport default Singleton;"]},"metadata":{},"sourceType":"module"}