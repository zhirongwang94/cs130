{"ast":null,"code":"import _regeneratorRuntime from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{Plugins}from\"@capacitor/core\";var Contacts=Plugins.Contacts;var ContactTracing=/*#__PURE__*/function(){function ContactTracing(){_classCallCheck(this,ContactTracing);this.cts=[];}_createClass(ContactTracing,[{key:\"sendMessage\",value:function sendMessage(){this.loadContacts(this.cts);//this.sendSms();\n}},{key:\"onSuccess\",value:function onSuccess(contacts){console.log(contacts.length+' contacts found');for(var i=0;i<contacts.length;i++){console.log(contacts[i].contactId+\" - \"+contacts[i].displayName);for(var j=0;j<contacts[i].phoneNumbers.length;j++){var phone=contacts[i].phoneNumbers[j];console.log(\"===> \"+phone+\"\\n\");}}}},{key:\"onError\",value:function onError(error){console.log(\"Error grabbing contacts! \"+error);}},{key:\"loadContacts\",value:function(){var _loadContacts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(contacts){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:Contacts.getContacts().then(function(result){contacts=result.contacts;var _iterator=_createForOfIteratorHelper(result.contacts),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var contact=_step.value;console.log(contact);}}catch(err){_iterator.e(err);}finally{_iterator.f();}});console.log(\"Contacts Loaded! \\n\");case 2:case\"end\":return _context.stop();}}},_callee);}));function loadContacts(_x){return _loadContacts.apply(this,arguments);}return loadContacts;}()// sendSms(){\n//   var message:String = \"\";\n//   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n//   for(var index in emergencyList){\n//     if(emergencyList[index].isChecked){\n//       message += emergencyList[index].val + \"\\n\";\n//     }\n//   }\n//   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n//   for(var index in symptomList){\n//     if(symptomList[index].isChecked){\n//       message += symptomList[index].val + \"\\n\";\n//     }\n//   }\n//   alert(\"Symptoms List \\n\" + message);\n//   SMS.send('5167120628', \"test sms\");\n//   alert(\"sendSms was called!\");\n// }\n}]);return ContactTracing;}();export{ContactTracing as default};","map":{"version":3,"sources":["/Users/calvinyung/Desktop/Fall 2020/cs130/project/cs130/src/pages/ContactTracing.tsx"],"names":["Plugins","Contacts","ContactTracing","cts","loadContacts","contacts","console","log","length","i","contactId","displayName","j","phoneNumbers","phone","error","getContacts","then","result","contact"],"mappings":"y3BACA,OAASA,OAAT,KAAwB,iBAAxB,C,GAESC,CAAAA,Q,CAAaD,O,CAAbC,Q,IAGYC,CAAAA,c,6FACjBC,G,CAAgB,E,8EAEH,CACX,KAAKC,YAAL,CAAkB,KAAKD,GAAvB,EACA;AAED,C,4CAEiBE,Q,CAAmB,CACnCC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAAT,CAAkB,iBAA9B,EACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGJ,QAAQ,CAACG,MAA5B,CAAoCC,CAAC,EAArC,CAAyC,CACvCH,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACI,CAAD,CAAR,CAAYC,SAAZ,CAAwB,KAAxB,CAAgCL,QAAQ,CAACI,CAAD,CAAR,CAAYE,WAAxD,EACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGP,QAAQ,CAACI,CAAD,CAAR,CAAYI,YAAZ,CAAyBL,MAA5C,CAAoDI,CAAC,EAArD,CAAyD,CACtD,GAAIE,CAAAA,KAAK,CAAGT,QAAQ,CAACI,CAAD,CAAR,CAAYI,YAAZ,CAAyBD,CAAzB,CAAZ,CACAN,OAAO,CAACC,GAAR,CAAY,QAAUO,KAAV,CAAkB,IAA9B,EACF,CACH,CACD,C,wCAEeC,K,CAAa,CAC3BT,OAAO,CAACC,GAAR,CAAY,4BAA8BQ,KAA1C,EACD,C,kIAEkBV,Q,kHACfJ,QAAQ,CAACe,WAAT,GAAuBC,IAAvB,CAA4B,SAAAC,MAAM,CAAI,CACtCb,QAAQ,CAAGa,MAAM,CAACb,QAAlB,CADsC,yCAEhBa,MAAM,CAACb,QAFS,YAEtC,+CAAuC,IAA5Bc,CAAAA,OAA4B,aACnCb,OAAO,CAACC,GAAR,CAAYY,OAAZ,EACH,CAJqC,qDAKzC,CALG,EAOFb,OAAO,CAACC,GAAR,CAAY,qBAAZ,E,sJAIF;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;qCAzDiBL,c","sourcesContent":["import { Contact } from \"@capacitor-community/contacts\";\nimport { Plugins } from \"@capacitor/core\";\n\nconst  { Contacts } = Plugins;\n\n\nexport default class ContactTracing {\n    cts:Contact[] = [];\n\n    sendMessage(){\n      this.loadContacts(this.cts);\n      //this.sendSms();\n      \n    }\n\n    private onSuccess(contacts:Contact[]){\n      console.log(contacts.length + ' contacts found');\n      for(var i = 0; i < contacts.length; i++) {\n        console.log(contacts[i].contactId + \" - \" + contacts[i].displayName);\n        for(var j = 0; j < contacts[i].phoneNumbers.length; j++) {\n           var phone = contacts[i].phoneNumbers[j];\n           console.log(\"===> \" + phone + \"\\n\");\n        }\n     }\n    }\n\n    private onError(error:string){\n      console.log(\"Error grabbing contacts! \" + error);\n    }\n  \n    async loadContacts(contacts:Contact[]){\n        Contacts.getContacts().then(result => {\n        contacts = result.contacts;\n        for (const contact of result.contacts) {\n            console.log(contact);\n        }\n    });\n  \n      console.log(\"Contacts Loaded! \\n\");\n    }\n  \n   \n    // sendSms(){\n     \n    //   var message:String = \"\";\n  \n    //   message += \"------------------------------\\nIF EXPERIENCING SEEK IMMEDIATE MEDICAL ATTENTION!\\n\";\n    //   for(var index in emergencyList){\n    //     if(emergencyList[index].isChecked){\n    //       message += emergencyList[index].val + \"\\n\";\n    //     }\n    //   }\n  \n    //   message += \"------------------------------\\nNon-Emergency Symptoms:\\n\";\n    //   for(var index in symptomList){\n    //     if(symptomList[index].isChecked){\n    //       message += symptomList[index].val + \"\\n\";\n    //     }\n    //   }\n  \n    //   alert(\"Symptoms List \\n\" + message);\n    //   SMS.send('5167120628', \"test sms\");\n    //   alert(\"sendSms was called!\");\n    // }\n\n  \n  }"]},"metadata":{},"sourceType":"module"}