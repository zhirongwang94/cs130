{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar SMSOriginal =\n/** @class */\nfunction (_super) {\n  __extends(SMSOriginal, _super);\n\n  function SMSOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SMSOriginal.prototype.send = function (phoneNumber, message, options) {\n    return cordova(this, \"send\", {\n      \"successIndex\": 3,\n      \"errorIndex\": 4\n    }, arguments);\n  };\n\n  SMSOriginal.prototype.hasPermission = function () {\n    return cordova(this, \"hasPermission\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  SMSOriginal.pluginName = \"SMS\";\n  SMSOriginal.plugin = \"cordova-sms-plugin\";\n  SMSOriginal.pluginRef = \"sms\";\n  SMSOriginal.repo = \"https://github.com/cordova-sms/cordova-sms-plugin\";\n  SMSOriginal.platforms = [\"Android\", \"iOS\", \"Windows\", \"Windows Phone 8\"];\n  return SMSOriginal;\n}(IonicNativePlugin);\n\nvar SMS = new SMSOriginal();\nexport { SMS };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/sms/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;;;AAoDyB,EAAA,SAAA,CAAA,WAAA,EAAiB,MAAjB,CAAA;;;;;;AAYvB,EAAA,WAAA,CAAA,SAAA,CAAI,IAAJ,GAAI,UAAC,WAAD,EAAgD,OAAhD,EAAsE,OAAtE,EAAsE;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AAAA,sBAAA,CAAA;AAAA,oBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA1E;;AAWA,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAa,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,eAAA,EAAA;AAAA,mBAAA,CAAA,SAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAb;;;;;;;SA5EF,W;EAqDyB,iB;;OAAZ,GAAA,IAAG,WAAH,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * Options for sending an SMS\n */\nexport interface SmsOptions {\n  /**\n   * Set to true to replace \\n by a new line. Default: false\n   */\n  replaceLineBreaks?: boolean;\n\n  android?: SmsOptionsAndroid;\n}\n\nexport interface SmsOptionsAndroid {\n  /**\n   * Set to \"INTENT\" to send SMS with the native android SMS messaging. Leaving it empty will send the SMS without opening any app.\n   */\n  intent?: string;\n}\n\n/**\n * @name SMS\n * @description\n *\n * Requires Cordova plugin: cordova-sms-plugin. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).\n *\n * @usage\n * ```typescript\n * import { SMS } from '@ionic-native/sms/ngx';\n *\n * constructor(private sms: SMS) { }\n *\n *\n * ...\n *\n *\n * // Send a text message using default options\n * this.sms.send('416123456', 'Hello world!');\n * ```\n * @interfaces\n * SmsOptions\n * SmsOptionsAndroid\n */\n@Plugin({\n  pluginName: 'SMS',\n  plugin: 'cordova-sms-plugin',\n  pluginRef: 'sms',\n  repo: 'https://github.com/cordova-sms/cordova-sms-plugin',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8'],\n})\n@Injectable()\nexport class SMS extends IonicNativePlugin {\n  /**\n   * Sends sms to a number\n   * @param phoneNumber {string|string[]} Phone number\n   * @param message {string} Message\n   * @param options {SmsOptions} Options\n   * @returns {Promise<any>} Resolves promise when the SMS has been sent\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n  })\n  send(phoneNumber: string | string[], message: string, options?: SmsOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function lets you know if the app has permission to send SMS\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if we have permission\n   */\n  @Cordova({\n    platforms: ['Android'],\n  })\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}